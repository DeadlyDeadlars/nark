#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –±–æ—Ç–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç—ã –∏–∑ –ø–∞–ø–æ–∫: dost, griffin, team
—Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∏–∑–æ–ª—è—Ü–∏–µ–π
"""

import asyncio
import sys
import os
import logging
import subprocess
import signal
import time
from pathlib import Path
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('all_bots_advanced.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class BotRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–æ–≤"""
    
    def __init__(self):
        self.processes: Dict[str, subprocess.Popen] = {}
        self.bot_configs = {
            'dost': {
                'path': 'dost',
                'script': 'bot.py',
                'name': 'DOST',
                'color': 'üü¢'
            },
            'griffin': {
                'path': 'griffin', 
                'script': 'main_bot.py',
                'name': 'GRIFFIN',
                'color': 'üîµ'
            },
            'team': {
                'path': 'team',
                'script': 'main_bot.py', 
                'name': 'TEAM',
                'color': 'üü°'
            }
        }
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        for bot_id, config in self.bot_configs.items():
            bot_path = Path(config['path'])
            script_path = bot_path / config['script']
            
            if not bot_path.exists():
                logger.error(f"‚ùå –ü–∞–ø–∫–∞ {config['path']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            if not script_path.exists():
                logger.error(f"‚ùå –§–∞–π–ª {config['script']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {config['path']}")
                return False
                
            logger.info(f"‚úÖ {config['color']} {config['name']}: {config['path']}/{config['script']}")
        
        return True
    
    def start_bot(self, bot_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        config = self.bot_configs[bot_id]
        bot_path = Path(config['path'])
        script_path = bot_path / config['script']
        
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {config['color']} {config['name']}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = subprocess.Popen(
                [sys.executable, str(script_path)],
                cwd=str(bot_path),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            self.processes[bot_id] = process
            logger.info(f"‚úÖ {config['color']} {config['name']} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {config['color']} {config['name']}: {e}")
            return False
    
    def stop_bot(self, bot_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if bot_id in self.processes:
            config = self.bot_configs[bot_id]
            process = self.processes[bot_id]
            
            try:
                logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {config['color']} {config['name']}...")
                process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {config['color']} {config['name']}")
                    process.kill()
                    process.wait()
                
                logger.info(f"‚úÖ {config['color']} {config['name']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {config['color']} {config['name']}: {e}")
    
    def start_all_bots(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        
        success_count = 0
        for bot_id in self.bot_configs.keys():
            if self.start_bot(bot_id):
                success_count += 1
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        
        logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω–æ –±–æ—Ç–æ–≤: {success_count}/{len(self.bot_configs)}")
        return success_count > 0
    
    def stop_all_bots(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        
        for bot_id in list(self.processes.keys()):
            self.stop_bot(bot_id)
        
        self.processes.clear()
        logger.info("üëã –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def monitor_bots(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤"""
        while True:
            try:
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                for bot_id, process in list(self.processes.items()):
                    config = self.bot_configs[bot_id]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    if process.poll() is not None:
                        logger.warning(f"‚ö†Ô∏è {config['color']} {config['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                        
                        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {config['color']} {config['name']}...")
                        self.stop_bot(bot_id)
                        time.sleep(2)
                        self.start_bot(bot_id)
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if hasattr(signal_handler, 'runner'):
        signal_handler.runner.stop_all_bots()
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    print("üìÅ –ü–∞–ø–∫–∏: dost, griffin, team")
    print("üìù –õ–æ–≥–∏: all_bots_advanced.log")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä BotRunner
    runner = BotRunner()
    signal_handler.runner = runner
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not runner.check_dependencies():
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã
        if not runner.start_all_bots():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
        runner.monitor_bots()
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        runner.stop_all_bots()

if __name__ == "__main__":
    main()
