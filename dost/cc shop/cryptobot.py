import aiohttp
import json
from typing import Optional, Dict, Any
from config import CRYPTOBOT_TOKEN, CRYPTOBOT_API_URL

class CryptoBot:
    def __init__(self):
        self.token = CRYPTOBOT_TOKEN
        self.api_url = CRYPTOBOT_API_URL
        self.headers = {
            "Crypto-Pay-API-Token": self.token,
            "Content-Type": "application/json"
        }
    
    async def create_invoice(self, amount: float, currency: str = "USDT", description: str = None) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        try:
            if not self.token:
                print("Error creating invoice: CRYPTOBOT_TOKEN is not set")
                return None
            payload = {
                "amount": str(amount),
                # Crypto Pay API expects 'asset' (e.g., 'USDT', 'TON', 'BTC')
                "asset": currency,
                "description": description or f"–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—É–º–º—É {amount} {currency}",
                "paid_btn_name": "callback",
                "paid_btn_url": "https://t.me/your_bot_username",
                "payload": "shop_payment"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_url}/createInvoice",
                    headers=self.headers,
                    json=payload
                ) as response:
                    text = await response.text()
                    if response.status == 200:
                        try:
                            result = await response.json()
                        except Exception:
                            print(f"Error creating invoice: invalid JSON: {text}")
                            return None
                        if result.get("ok"):
                            return result.get("result")
                        print(f"Error creating invoice: API responded not ok: {result}")
                        return None
                    print(f"Error creating invoice: HTTP {response.status}: {text}")
                    return None
        except Exception as e:
            print(f"Error creating invoice: {e}")
            return None
    
    async def get_invoice_status(self, invoice_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞"""
        try:
            payload = {"invoice_id": invoice_id}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_url}/getInvoice",
                    headers=self.headers,
                    json=payload
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return result.get("result", {}).get("status")
                    return None
        except Exception as e:
            print(f"Error getting invoice status: {e}")
            return None
    
    async def get_exchange_rates(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.api_url}/getExchangeRates",
                    headers=self.headers
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return result.get("result")
                    return None
        except Exception as e:
            print(f"Error getting exchange rates: {e}")
            return None
    
    async def get_currencies(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.api_url}/getCurrencies",
                    headers=self.headers
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return result.get("result")
                    return None
        except Exception as e:
            print(f"Error getting currencies: {e}")
            return None
    
    def format_payment_message(self, invoice_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        if not invoice_data:
            return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"
        
        amount = invoice_data.get("amount", 0)
        currency = invoice_data.get("asset", "USDT")
        pay_url = invoice_data.get("pay_url", "")
        invoice_id = invoice_data.get("invoice_id", "")
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_invoice_url, –µ—Å–ª–∏ –µ—Å—Ç—å (—ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π deep-link ?start=invoice-<ID>)
        bot_invoice_url = invoice_data.get("bot_invoice_url") or ""
        preferred_url = bot_invoice_url or pay_url or ""
        safe_pay_url = preferred_url.replace("(", "%28").replace(")", "%29") if isinstance(preferred_url, str) else ""
        message = (
            "üí≥ *–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω*\n\n"
            f"üí∞ –°—É–º–º–∞: `{amount} {currency}`\n"
            f"üÜî ID —Å—á–µ—Ç–∞: `{invoice_id}`\n\n"
            f"üîó [–û–ø–ª–∞—Ç–∏—Ç—å –≤ CryptoBot]({safe_pay_url})\n\n"
            "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç"
        )
        
        return message
    
    def create_payment_keyboard(self, invoice_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        return {
            "inline_keyboard": [
                [
                    {
                        "text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                        "url": f"https://t.me/CryptoBot?start=pay-{invoice_id}"
                    }
                ],
                [
                    {
                        "text": "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        "callback_data": f"check_payment_{invoice_id}"
                    }
                ],
                [
                    {
                        "text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        "callback_data": f"cancel_payment_{invoice_id}"
                    }
                ]
            ]
        }
    
    async def process_webhook(self, webhook_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞"""
        try:
            if webhook_data.get("status") == "paid":
                return {
                    "invoice_id": webhook_data.get("invoice_id"),
                    "amount": webhook_data.get("amount"),
                    "currency": webhook_data.get("currency"),
                    "status": "paid",
                    "payload": webhook_data.get("payload")
                }
            return None
        except Exception as e:
            print(f"Error processing webhook: {e}")
            return None
