#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è LUXURY SHOP Telegram Bot
"""

import sys
import os
import sqlite3
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import Database
from admin_auth import AdminAuth

class AdminPanel:
    def __init__(self):
        self.db = Database()
        self.auth = AdminAuth()
    
    def check_admin_access(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
        print("-" * 40)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: ").strip()
        username = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–±–µ–∑ @): ").strip()
        
        if username and not username.startswith('@'):
            username = f"@{username}"
        
        try:
            user_id = int(user_id)
            if self.auth.is_admin(user_id, username):
                print(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username or user_id}")
                return True
            else:
                print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return False
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        while True:
            print("\n" + "="*50)
            print("üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ LUXURY SHOP")
            print("="*50)
            print("1. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("2. üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            print("3. üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
            print("4. üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
            print("5. üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏")
            print("6. üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
            print("7. üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("8. üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("9. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
            print("10. üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
            print("11. üì° –°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–æ–≤")
            print("0. ‚ùå –í—ã—Ö–æ–¥")
            print("="*50)
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-11): ").strip()
            
            if choice == "1":
                self.show_statistics()
            elif choice == "2":
                self.manage_users()
            elif choice == "3":
                self.manage_products()
            elif choice == "4":
                self.manage_orders()
            elif choice == "5":
                self.manage_balances()
            elif choice == "6":
                self.broadcast_messages()
            elif choice == "7":
                self.manage_user_blocks()
            elif choice == "8":
                self.backup_database()
            elif choice == "9":
                self.bot_settings()
            elif choice == "10":
                self.manage_administrators()
            elif choice == "11":
                self.webhook_status()
            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("-" * 30)
        
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM users WHERE balance > 0")
            users_with_balance = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
            cursor.execute("SELECT COUNT(*) FROM products")
            total_products = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM products WHERE is_active = 1")
            active_products = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            cursor.execute("SELECT COUNT(*) FROM orders")
            total_orders = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'completed'")
            completed_orders = cursor.fetchone()[0]
            
            # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤
            cursor.execute("SELECT SUM(amount) FROM orders WHERE status = 'completed'")
            total_revenue = cursor.fetchone()[0] or 0
            
            conn.close()
            
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total_users} (—Å –±–∞–ª–∞–Ω—Å–æ–º: {users_with_balance})")
            print(f"üì¶ –¢–æ–≤–∞—Ä—ã: {total_products} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_products})")
            print(f"üìã –ó–∞–∫–∞–∑—ã: {total_orders} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_orders})")
            print(f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f} $")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def manage_users(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        while True:
            print("\nüë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
            print("-" * 30)
            print("1. üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("2. üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("3. üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            print("4. üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("5. üîô –ù–∞–∑–∞–¥")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
            
            if choice == "1":
                self.list_users()
            elif choice == "2":
                self.find_user()
            elif choice == "3":
                self.change_user_balance()
            elif choice == "4":
                self.block_user()
            elif choice == "5":
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    
    def list_users(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, username, first_name, balance, created_at 
                FROM users ORDER BY created_at DESC LIMIT 20
            """)
            users = cursor.fetchall()
            conn.close()
            
            if not users:
                print("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            print("-" * 80)
            print(f"{'ID':<12} {'Username':<20} {'–ò–º—è':<20} {'–ë–∞–ª–∞–Ω—Å':<10} {'–î–∞—Ç–∞'}")
            print("-" * 80)
            
            for user in users:
                user_id, username, first_name, balance, created_at = user
                username = username or "N/A"
                first_name = first_name or "N/A"
                print(f"{user_id:<12} {username:<20} {first_name:<20} {balance:<10.2f} {created_at}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def find_user(self):
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
        
        try:
            user_id = int(user_id)
            user = self.db.get_user(user_id)
            
            if user:
                print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
                print(f"ID: {user['user_id']}")
                print(f"Username: {user.get('username', 'N/A')}")
                print(f"–ò–º—è: {user.get('first_name', 'N/A')}")
                print(f"–ë–∞–ª–∞–Ω—Å: {user.get('balance', 0)} $")
                print(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('created_at', 'N/A')}")
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def change_user_balance(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip())
            amount = float(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è (+ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, - –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è): ").strip())
            
            if self.db.update_balance(user_id, amount):
                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount} $")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
                
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def manage_products(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
        while True:
            print("\nüì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò")
            print("-" * 30)
            print("1. üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            print("2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
            print("3. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            print("4. üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            print("5. üîô –ù–∞–∑–∞–¥")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
            
            if choice == "1":
                self.list_products()
            elif choice == "2":
                self.add_product()
            elif choice == "3":
                self.edit_product()
            elif choice == "4":
                self.deactivate_product()
            elif choice == "5":
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    
    def list_products(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        products = self.db.get_products()
        
        if not products:
            print("üì¶ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print("-" * 100)
        print(f"{'ID':<4} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<40} {'–¶–µ–Ω–∞':<8} {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–ö–æ–ª-–≤–æ':<8} {'–°—Ç–∞—Ç—É—Å'}")
        print("-" * 100)
        
        for product in products:
            status = "‚úÖ" if product['is_active'] else "‚ùå"
            quantity = "‚àû" if product['quantity'] == -1 else str(product['quantity'])
            name = product['name'][:37] + "..." if len(product['name']) > 40 else product['name']
            
            print(f"{product['id']:<4} {name:<40} {product['price']:<8.0f} {product['category']:<15} {quantity:<8} {status}")
    
    def add_product(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
        try:
            print("\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –¢–û–í–ê–†–ê")
            print("-" * 30)
            
            name = input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ").strip()
            description = input("–û–ø–∏—Å–∞–Ω–∏–µ: ").strip()
            price = float(input("–¶–µ–Ω–∞ ($): ").strip())
            category = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ").strip()
            emoji = input("–≠–º–æ–¥–∑–∏: ").strip()
            quantity = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (-1 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏): ").strip())
            
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (name, description, price, category, emoji, quantity)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (name, description, price, category, emoji, quantity))
            conn.commit()
            conn.close()
            
            print("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
    
    def manage_orders(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
        print("\nüìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò")
        print("-" * 30)
        
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT o.id, o.user_id, p.name, o.amount, o.status, o.created_at
                FROM orders o
                JOIN products p ON o.product_id = p.id
                ORDER BY o.created_at DESC LIMIT 20
            """)
            orders = cursor.fetchall()
            conn.close()
            
            if not orders:
                print("üìã –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –∑–∞–∫–∞–∑–æ–≤:")
            print("-" * 80)
            print(f"{'ID':<4} {'User ID':<10} {'–¢–æ–≤–∞—Ä':<30} {'–°—É–º–º–∞':<8} {'–°—Ç–∞—Ç—É—Å':<12} {'–î–∞—Ç–∞'}")
            print("-" * 80)
            
            for order in orders:
                order_id, user_id, product_name, amount, status, created_at = order
                product_name = product_name[:27] + "..." if len(product_name) > 30 else product_name
                print(f"{order_id:<4} {user_id:<10} {product_name:<30} {amount:<8.2f} {status:<12} {created_at}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    def manage_balances(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏"""
        print("\nüí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê–ú–ò")
        print("-" * 30)
        
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, username, first_name, balance
                FROM users
                WHERE balance > 0
                ORDER BY balance DESC
            """)
            users = cursor.fetchall()
            conn.close()
            
            if not users:
                print("üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º (–≤—Å–µ–≥–æ: {len(users)}):")
            print("-" * 60)
            print(f"{'User ID':<10} {'Username':<20} {'–ò–º—è':<20} {'–ë–∞–ª–∞–Ω—Å'}")
            print("-" * 60)
            
            total_balance = 0
            for user in users:
                user_id, username, first_name, balance = user
                username = username or "N/A"
                first_name = first_name or "N/A"
                total_balance += balance
                print(f"{user_id:<10} {username:<20} {first_name:<20} {balance:.2f} $")
            
            print("-" * 60)
            print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_balance:.2f} $")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
    
    def backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        import shutil
        from datetime import datetime
        
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"backup_shop_bot_{timestamp}.db"
            
            shutil.copy2(self.db.db_path, backup_path)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    
    def broadcast_messages(self):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        print("\nüì¢ –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô")
        print("-" * 30)
        print("1. üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        print("2. üéØ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("3. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫")
        print("4. üîô –ù–∞–∑–∞–¥")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
        
        if choice == "1":
            self.send_broadcast_to_all()
        elif choice == "2":
            self.send_broadcast_by_category()
        elif choice == "3":
            self.show_broadcast_stats()
        elif choice == "4":
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    
    def send_broadcast_to_all(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ").strip()
            if not message:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            confirm = input(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '{message[:50]}...' –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (y/n): ").strip().lower()
            if confirm != 'y':
                print("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()
            conn.close()
            
            if not users:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def send_broadcast_by_category(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            print("\nüéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            print("1. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            print("2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º > 0")
            print("3. –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)")
            print("4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏")
            
            category = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-4): ").strip()
            message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ").strip()
            
            if not message:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            if category == "1":
                cursor.execute("SELECT user_id FROM users")
                category_name = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            elif category == "2":
                cursor.execute("SELECT user_id FROM users WHERE balance > 0")
                category_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –±–∞–ª–∞–Ω—Å–æ–º"
            elif category == "3":
                cursor.execute("SELECT user_id FROM users WHERE created_at >= datetime('now', '-7 days')")
                category_name = "–Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            elif category == "4":
                cursor.execute("SELECT DISTINCT user_id FROM orders")
                category_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞–∫–∞–∑–∞–º–∏"
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                conn.close()
                return
            
            users = cursor.fetchall()
            conn.close()
            
            if not users:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ({category_name})...")
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def show_broadcast_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–û–ö")
        print("-" * 30)
        
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
            cursor.execute("SELECT COUNT(*) FROM users WHERE balance > 0")
            users_with_balance = cursor.fetchone()[0]
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor.execute("SELECT COUNT(*) FROM users WHERE created_at >= datetime('now', '-7 days')")
            new_users = cursor.fetchone()[0]
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
            cursor.execute("SELECT COUNT(DISTINCT user_id) FROM orders")
            users_with_orders = cursor.fetchone()[0]
            
            conn.close()
            
            print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            print(f"üí∞ –° –±–∞–ª–∞–Ω—Å–æ–º: {users_with_balance}")
            print(f"üÜï –ù–æ–≤—ã–µ (7 –¥–Ω–µ–π): {new_users}")
            print(f"üì¶ –° –∑–∞–∫–∞–∑–∞–º–∏: {users_with_orders}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def manage_user_blocks(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüö´ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–û–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("-" * 40)
        print("1. üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("2. ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("3. üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
        print("4. üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("5. üîô –ù–∞–∑–∞–¥")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == "1":
            self.block_user()
        elif choice == "2":
            self.unblock_user()
        elif choice == "3":
            self.list_blocked_users()
        elif choice == "4":
            self.find_user_for_block()
        elif choice == "5":
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    
    def block_user(self):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ").strip()
            reason = input("–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ").strip()
            
            if not reason:
                reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            try:
                user_id = int(user_id)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT username, first_name FROM users WHERE user_id = ?", (user_id,))
            user = cursor.fetchone()
            
            if not user:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                conn.close()
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS blocked_users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    reason TEXT,
                    blocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    blocked_by TEXT DEFAULT 'admin'
                )
            ''')
            
            cursor.execute('''
                INSERT OR REPLACE INTO blocked_users (user_id, username, first_name, reason)
                VALUES (?, ?, ?, ?)
            ''', (user_id, user[0], user[1], reason))
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def unblock_user(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ").strip()
            
            try:
                user_id = int(user_id)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            cursor.execute("DELETE FROM blocked_users WHERE user_id = ?", (user_id,))
            affected = cursor.rowcount
            
            conn.commit()
            conn.close()
            
            if affected > 0:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def list_blocked_users(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS blocked_users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    reason TEXT,
                    blocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    blocked_by TEXT DEFAULT 'admin'
                )
            ''')
            
            cursor.execute("SELECT * FROM blocked_users ORDER BY blocked_at DESC")
            blocked_users = cursor.fetchall()
            conn.close()
            
            if not blocked_users:
                print("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
                return
            
            print(f"\nüö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(blocked_users)}):")
            print("-" * 80)
            print(f"{'ID':<12} {'Username':<20} {'–ò–º—è':<20} {'–ü—Ä–∏—á–∏–Ω–∞':<20} {'–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏'}")
            print("-" * 80)
            
            for user in blocked_users:
                user_id, username, first_name, reason, blocked_at, blocked_by = user
                username = username or "N/A"
                first_name = first_name or "N/A"
                reason = reason[:17] + "..." if len(reason) > 20 else reason
                print(f"{user_id:<12} {username:<20} {first_name:<20} {reason:<20} {blocked_at}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {e}")
    
    def find_user_for_block(self):
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            search = input("–í–≤–µ–¥–∏—Ç–µ ID, username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
            
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–∏—Å–∫ –ø–æ ID
            try:
                user_id = int(search)
                cursor.execute("SELECT user_id, username, first_name, balance FROM users WHERE user_id = ?", (user_id,))
            except ValueError:
                # –ü–æ–∏—Å–∫ –ø–æ username –∏–ª–∏ –∏–º–µ–Ω–∏
                cursor.execute("""
                    SELECT user_id, username, first_name, balance 
                    FROM users 
                    WHERE username LIKE ? OR first_name LIKE ?
                """, (f"%{search}%", f"%{search}%"))
            
            users = cursor.fetchall()
            conn.close()
            
            if not users:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            print("-" * 60)
            print(f"{'ID':<12} {'Username':<20} {'–ò–º—è':<20} {'–ë–∞–ª–∞–Ω—Å'}")
            print("-" * 60)
            
            for user in users:
                user_id, username, first_name, balance = user
                username = username or "N/A"
                first_name = first_name or "N/A"
                print(f"{user_id:<12} {username:<20} {first_name:<20} {balance:.2f} $")
            
            if len(users) == 1:
                user_id = users[0][0]
                block_choice = input(f"\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}? (y/n): ").strip().lower()
                if block_choice == 'y':
                    reason = input("–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ").strip()
                    if not reason:
                        reason = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
                    
                    conn = sqlite3.connect(self.db.db_path)
                    cursor = conn.cursor()
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS blocked_users (
                            user_id INTEGER PRIMARY KEY,
                            username TEXT,
                            first_name TEXT,
                            reason TEXT,
                            blocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            blocked_by TEXT DEFAULT 'admin'
                        )
                    ''')
                    cursor.execute('''
                        INSERT OR REPLACE INTO blocked_users (user_id, username, first_name, reason)
                        VALUES (?, ?, ?, ?)
                    ''', (user_id, users[0][1], users[0][2], reason))
                    conn.commit()
                    conn.close()
                    
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def bot_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        print("\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê")
        print("-" * 30)
        print("1. üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("2. üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
        print("3. üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        print("4. üîô –ù–∞–∑–∞–¥")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
        
        if choice == "1":
            self.main_settings()
        elif choice == "2":
            self.payment_settings()
        elif choice == "3":
            self.product_settings()
        elif choice == "4":
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    
    def main_settings(self):
        """–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        print("\nüîß –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò")
        print("-" * 30)
        
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    description TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = [
                ("bot_name", "LUXURY SHOP", "–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞"),
                ("welcome_message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LUXURY SHOP!", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
                ("maintenance_mode", "false", "–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"),
                ("max_products_per_user", "10", "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"),
                ("auto_delete_inactive_users", "30", "–î–Ω–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            ]
            
            for key, value, description in settings:
                cursor.execute('''
                    INSERT OR IGNORE INTO bot_settings (key, value, description)
                    VALUES (?, ?, ?)
                ''', (key, value, description))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            cursor.execute("SELECT key, value, description FROM bot_settings")
            current_settings = cursor.fetchall()
            
            print("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            print("-" * 50)
            for key, value, description in current_settings:
                print(f"üîë {key}: {value}")
                print(f"üìù {description}")
                print("-" * 50)
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            change_choice = input("\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/n): ").strip().lower()
            if change_choice == 'y':
                setting_key = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ").strip()
                new_value = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ").strip()
                
                cursor.execute("UPDATE bot_settings SET value = ?, updated_at = CURRENT_TIMESTAMP WHERE key = ?", (new_value, setting_key))
                if cursor.rowcount > 0:
                    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    print(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                conn.commit()
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def payment_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        print("\nüí∞ –ù–ê–°–¢–†–û–ô–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô")
        print("-" * 30)
        print("1. üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
        print("2. üè¶ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã")
        print("3. ‚è∞ –¢–∞–π–º–∞—É—Ç –ø–ª–∞—Ç–µ–∂–∞")
        print("4. üîô –ù–∞–∑–∞–¥")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
        
        if choice == "1":
            self.set_min_payment()
        elif choice == "2":
            self.set_currencies()
        elif choice == "3":
            self.set_payment_timeout()
        elif choice == "4":
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    
    def product_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        print("\nüì¶ –ù–ê–°–¢–†–û–ô–ö–ò –¢–û–í–ê–†–û–í")
        print("-" * 30)
        print("1. üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        print("2. üè∑Ô∏è –¢–µ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        print("3. üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
        print("4. üîô –ù–∞–∑–∞–¥")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
        
        if choice == "1":
            self.manage_categories()
        elif choice == "2":
            self.manage_tags()
        elif choice == "3":
            self.manage_product_images()
        elif choice == "4":
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    
    def manage_categories(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        print("\nüìä –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò")
        print("-" * 30)
        
        try:
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cursor.execute("SELECT DISTINCT category FROM products ORDER BY category")
            categories = cursor.fetchall()
            
            print("üìã –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for i, (category,) in enumerate(categories, 1):
                print(f"{i}. {category}")
            
            print("\n1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            print("2. ‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            print("3. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            print("4. üîô –ù–∞–∑–∞–¥")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
            
            if choice == "1":
                new_category = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ").strip()
                if new_category:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    cursor.execute('''
                        INSERT INTO products (name, description, price, category, emoji, quantity)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä {new_category}", f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {new_category}", 0.0, new_category, "üì¶", 1))
                    conn.commit()
                    print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            elif choice == "2":
                if categories:
                    old_category = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: ").strip()
                    new_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ").strip()
                    
                    if old_category and new_name:
                        cursor.execute("UPDATE products SET category = ? WHERE category = ?", (new_name, old_category))
                        conn.commit()
                        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{old_category}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'")
            
            elif choice == "3":
                if categories:
                    category_to_delete = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
                    confirm = input(f"–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_to_delete}' –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–µ–π? (y/n): ").strip().lower()
                    
                    if confirm == 'y':
                        cursor.execute("DELETE FROM products WHERE category = ?", (category_to_delete,))
                        conn.commit()
                        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_to_delete}' —É–¥–∞–ª–µ–Ω–∞")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {e}")
    
    def manage_tags(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        print("\nüè∑Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–ì–ê–ú–ò")
        print("-" * 30)
        print("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    def manage_product_images(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        print("\nüì∏ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò")
        print("-" * 30)
        print("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    def set_min_payment(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞"""
        print("\nüí≥ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –ü–õ–ê–¢–ï–ñ–ê")
        print("-" * 30)
        try:
            amount = input("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ ($): ").strip()
            if amount:
                print(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount} $")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def set_currencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã"""
        print("\nüè¶ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –í–ê–õ–Æ–¢–´")
        print("-" * 30)
        print("–¢–µ–∫—É—â–∏–µ –≤–∞–ª—é—Ç—ã: USDT, BTC, ETH")
        print("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    def set_payment_timeout(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –ø–ª–∞—Ç–µ–∂–∞"""
        print("\n‚è∞ –¢–ê–ô–ú–ê–£–¢ –ü–õ–ê–¢–ï–ñ–ê")
        print("-" * 30)
        try:
            timeout = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –ø–ª–∞—Ç–µ–∂–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö: ").strip()
            if timeout:
                print(f"‚úÖ –¢–∞–π–º–∞—É—Ç –ø–ª–∞—Ç–µ–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeout} –º–∏–Ω—É—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def manage_administrators(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        print("\nüëë –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò")
        print("-" * 40)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_list = self.auth.get_admin_list()
        
        print("üìã –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
        print(f"üë§ Usernames: {', '.join(admin_list['usernames'])}")
        print(f"üÜî IDs: {', '.join(map(str, admin_list['ids']))}")
        print(f"üìä –í—Å–µ–≥–æ: {admin_list['total']}")
        
        print("\n‚ö†Ô∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env")
        print("üìù –§–æ—Ä–º–∞—Ç:")
        print("ADMIN_USERNAMES=@admin1,@admin2,@admin3")
        print("ADMIN_IDS=123456789,987654321,555666777")
    
    def webhook_status(self):
        """–°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–æ–≤"""
        print("\nüì° –°–¢–ê–¢–£–° –í–ï–ë–•–£–ö–û–í")
        print("-" * 30)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–±—Ö—É–∫–æ–≤
            last_webhook = self.db.get_last_webhook_time()
            total_webhooks = self.db.get_total_webhooks()
            successful_webhooks = self.db.get_successful_webhooks()
            
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–±—Ö—É–∫–æ–≤: {total_webhooks}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤: {successful_webhooks}")
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤: {total_webhooks - successful_webhooks}")
            
            if last_webhook:
                print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ–±—Ö—É–∫: {last_webhook}")
            else:
                print("üïê –í–µ–±—Ö—É–∫–∏ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏")
            
            print("\nüåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤:")
            print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEBHOOK_URL –≤ .env")
            print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEBHOOK_SECRET –≤ .env")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ webhook_handler.py")
            print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–±—Ö—É–∫ –≤ CryptoBot")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å LUXURY SHOP!")
    
    admin = AdminPanel()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not admin.check_admin_access():
        print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    
    admin.show_menu()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –†–∞–±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
