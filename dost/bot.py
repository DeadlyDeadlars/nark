import asyncio
import os
import time
import random
import secrets
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from config import BOT_TOKEN, ADMIN_ID, PACKAGING_OPTIONS, MIN_DELIVERY_TIME, MAX_DELIVERY_TIME, ABOUT_TEXT
from catalog import get_variant
from database import Database
from keyboards import (
    get_main_keyboard, get_products_keyboard, get_packaging_keyboard,
    get_cancel_keyboard, get_admin_keyboard, get_confirm_keyboard,
    get_payment_method_keyboard, get_payment_confirm_keyboard
)
from states import OrderStates, AdminStates
from logger import setup_logging, log_order, log_admin_action, log_error, log_payment_event, log_user_action

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_orders = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = None

async def safe_edit_text(message: types.Message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É 'message is not modified'."""
    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            try:
                await message.edit_reply_markup(reply_markup=reply_markup)
            except TelegramBadRequest:
                pass
        else:
            raise

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        db.track_user(message.from_user.id, message.from_user.username)
    except Exception as e:
        if logger:
            await log_error(logger, f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(message.from_user.id) == ADMIN_ID:
        await message.answer(
            "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.callback_query(F.data == "about")
async def about_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'"""
    await safe_edit_text(callback.message, ABOUT_TEXT, reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "order")
async def order_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'"""
    await safe_edit_text(callback.message, "üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=get_products_keyboard())

@dp.callback_query(F.data.startswith("product:"))
async def product_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_name = callback.data.split(":", 1)[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    user_id = callback.from_user.id
    if user_id not in user_orders:
        user_orders[user_id] = {}
    user_orders[user_id]['product'] = product_name
    if logger:
        await log_user_action(logger, user_id, callback.from_user.username, "select_product", product=product_name)
    
    await safe_edit_text(callback.message, f"üì¶ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {product_name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞—Å–æ–≤–∫—É:", reply_markup=get_packaging_keyboard(product_name))

@dp.callback_query(F.data.startswith("packaging:"))
async def packaging_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞—Å–æ–≤–∫–∏"""
    packaging_index = int(callback.data.split(":", 1)[1])
    product_name = user_orders.get(callback.from_user.id, {}).get('product')
    variant = get_variant(product_name, packaging_index)
    packaging = variant.weight if variant else (PACKAGING_OPTIONS[packaging_index] if 0 <= packaging_index < len(PACKAGING_OPTIONS) else "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∞—Å–æ–≤–∫—É
    user_id = callback.from_user.id
    if user_id not in user_orders:
        user_orders[user_id] = {}
    user_orders[user_id]['packaging'] = packaging
    if variant:
        user_orders[user_id]['price'] = variant.price
    if logger:
        await log_user_action(logger, user_id, callback.from_user.username, "select_packaging", product=product_name, packaging=packaging)
    
    await safe_edit_text(callback.message, f"üì¶ –í—ã–±—Ä–∞–Ω–∞ —Ñ–∞—Å–æ–≤–∫–∞: {packaging}\n\n–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_cancel_keyboard())
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (–±–µ–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    await state.set_state(OrderStates.waiting_for_address)
    await callback.answer()

@dp.message(OrderStates.waiting_for_address)
async def address_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    address = message.text.strip()
    
    if len(address) < 10:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return
    
    user_id = message.from_user.id
    if user_id not in user_orders:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_keyboard())
        return
    
    user_orders[user_id]['address'] = address
    if logger:
        await log_user_action(logger, user_id, message.from_user.username, "enter_address", product=user_orders[user_id].get('product'), packaging=user_orders[user_id].get('packaging'), address=address)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_time = random.randint(MIN_DELIVERY_TIME, MAX_DELIVERY_TIME)
    user_orders[user_id]['delivery_time'] = delivery_time
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    price_part = f"\nüíµ *–¶–µ–Ω–∞:* {int(user_orders[user_id]['price']) if isinstance(user_orders[user_id].get('price'), (int, float)) and float(user_orders[user_id]['price']).is_integer() else user_orders[user_id].get('price')} ‚ÇΩ" if user_orders[user_id].get('price') is not None else ""
    order_text = (
        f"üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:*\n\n"
        f"üõí *–¢–æ–≤–∞—Ä:* {user_orders[user_id]['product']}\n"
        f"üì¶ *–ö–æ–ª-–≤–æ:* {user_orders[user_id]['packaging']}\n"
        f"üè† *–ê–¥—Ä–µ—Å:* {address}\n"
        f"{price_part}\n"
        f"‚è≥ *–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_time} –º–∏–Ω—É—Ç\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
    )
    
    await message.answer(order_text, reply_markup=get_confirm_keyboard())
    await state.clear()

@dp.callback_query(F.data == "confirm_order")
async def confirm_order_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"
    
    if user_id not in user_orders:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return
    
    order_data = user_orders[user_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    order_id = db.add_order(
        user_id=user_id,
        username=username,
        product=order_data['product'],
        packaging=order_data['packaging'],
        address=order_data['address'],
        delivery_time=order_data['delivery_time']
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    price_part = f"{int(order_data['price']) if isinstance(order_data.get('price'), (int, float)) and float(order_data['price']).is_integer() else order_data.get('price')} ‚ÇΩ" if order_data.get('price') is not None else "‚Äî"
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–π)
    order_number = secrets.randbelow(900000) + 100000  # —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π
    user_orders[user_id]['order_number'] = order_number
    payment_text = (
        f"üßæ *–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!*\n\n"
        f"#Ô∏è‚É£ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* {order_number}\n"
        f"üõí *–¢–æ–≤–∞—Ä:* {order_data['product']} ({order_data['packaging']})\n"
        f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price_part}\n"
        f"‚è≥ *–î–æ—Å—Ç–∞–≤–∫–∞:* {order_data['delivery_time']} –º–∏–Ω.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:" 
    )
    await safe_edit_text(callback.message, payment_text, reply_markup=get_payment_method_keyboard())
    if logger:
        await log_payment_event(
            logger,
            user_id,
            "show_payment_methods",
            details=f"order_id={order_id}",
            username=username,
            product=order_data['product'],
            packaging=order_data['packaging'],
            amount=price_part,
            order_number=order_number,
        )
@dp.callback_query(F.data == "pay_card")
async def pay_card_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_orders:
        # –î–æ–ø—É—Å—Ç–∏–º, –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å—Å—è; –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–µ–∑ —Å—É–º–º—ã
        amount_text = "‚Äî"
        product_text = "‚Äî"
    else:
        data = user_orders[user_id]
        amount_text = f"{int(data['price']) if isinstance(data.get('price'), (int, float)) and float(data['price']).is_integer() else data.get('price')} ‚ÇΩ" if data.get('price') is not None else "‚Äî"
        product_text = f"{data['product']} ({data['packaging']})"

    # –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env (–Ω–∞–ø—Ä–∏–º–µ—Ä, CARD_NUMBER). –ü–æ–∫–∞ –ø–æ–∫–∞–∂–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
    card_number = os.getenv("CARD_NUMBER", "2200 0000 0000 0000")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–ø–ª–∞—Ç—É: 10 –º–∏–Ω—É—Ç
    user_orders.setdefault(user_id, {})
    user_orders[user_id]['payment_deadline'] = time.time() + 10 * 60
    payment_details = (
        f"üìá *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n`{card_number}`\n\n"
        f"#Ô∏è‚É£ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* {user_orders.get(user_id, {}).get('order_number', '‚Äî')}\n"
        f"üí∞ *–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:* {amount_text}\n"
        f"üéÅ *–¢–æ–≤–∞—Ä:* {product_text}\n\n"
        f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
        f"‚è≥ *–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:* 10 –º–∏–Ω—É—Ç"
    )
    await safe_edit_text(callback.message, payment_details, reply_markup=get_payment_confirm_keyboard())
    if logger:
        await log_payment_event(
            logger,
            user_id,
            "pay_method_selected",
            method="card",
            username=callback.from_user.username,
            product=data.get('product') if user_id in user_orders else None,
            packaging=data.get('packaging') if user_id in user_orders else None,
            amount=amount_text,
            order_number=user_orders.get(user_id, {}).get('order_number'),
        )

@dp.callback_query(F.data == "confirm_payment")
async def confirm_payment_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–ø–ª–∞—Ç—ã
    deadline = user_orders.get(user_id, {}).get('payment_deadline')
    if deadline is None or time.time() > deadline:
        from config import SUPPORT_USERNAME
        from keyboards import get_payment_retry_keyboard
        expired_text = (
            f"‚è∞ *–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ.*\n\n"
            f"–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {SUPPORT_USERNAME}.\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã."
        )
        await safe_edit_text(callback.message, expired_text, reply_markup=get_payment_retry_keyboard())
        if logger:
            await log_payment_event(
                logger,
                user_id,
                "payment_time_expired",
                username=callback.from_user.username,
                product=user_orders.get(user_id, {}).get('product'),
                packaging=user_orders.get(user_id, {}).get('packaging'),
                amount=(f"{int(user_orders[user_id]['price']) if isinstance(user_orders[user_id].get('price'), (int, float)) and float(user_orders[user_id]['price']).is_integer() else user_orders[user_id].get('price')} ‚ÇΩ" if user_orders.get(user_id, {}).get('price') is not None else None),
                order_number=user_orders.get(user_id, {}).get('order_number'),
                method="card",
            )
        return
    searching_text = "üîé *–ò—â–µ–º –≤–∞—à –ø–ª–∞—Ç—ë–∂ –≤ —Å–∏—Å—Ç–µ–º–µ‚Ä¶*"
    await safe_edit_text(callback.message, searching_text)
    if logger:
        await log_payment_event(
            logger,
            user_id,
            "confirm_payment_clicked",
            username=callback.from_user.username,
            product=user_orders.get(user_id, {}).get('product'),
            packaging=user_orders.get(user_id, {}).get('packaging'),
            amount=(f"{int(user_orders[user_id]['price']) if isinstance(user_orders[user_id].get('price'), (int, float)) and float(user_orders[user_id]['price']).is_integer() else user_orders[user_id].get('price')} ‚ÇΩ" if user_orders.get(user_id, {}).get('price') is not None else None),
            order_number=user_orders.get(user_id, {}).get('order_number'),
        )
    await asyncio.sleep(10)
    from config import SUPPORT_USERNAME
    from keyboards import get_payment_retry_keyboard
    fail_text = (
        f"‚ùå *–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n"
        f"–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {SUPPORT_USERNAME}.\n"
        f"–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await safe_edit_text(callback.message, fail_text, reply_markup=get_payment_retry_keyboard())
    if logger:
        await log_payment_event(
            logger,
            user_id,
            "payment_not_found",
            username=callback.from_user.username,
            product=user_orders.get(user_id, {}).get('product'),
            packaging=user_orders.get(user_id, {}).get('packaging'),
            amount=(f"{int(user_orders[user_id]['price']) if isinstance(user_orders[user_id].get('price'), (int, float)) and float(user_orders[user_id]['price']).is_integer() else user_orders[user_id].get('price')} ‚ÇΩ" if user_orders.get(user_id, {}).get('price') is not None else None),
            order_number=user_orders.get(user_id, {}).get('order_number'),
            method="card",
        )

@dp.callback_query(F.data == "retry_payment")
async def retry_payment_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    searching_text = "üîé *–ò—â–µ–º –≤–∞—à –ø–ª–∞—Ç—ë–∂ –≤ —Å–∏—Å—Ç–µ–º–µ‚Ä¶*"
    await safe_edit_text(callback.message, searching_text)
    if logger:
        await log_payment_event(
            logger,
            user_id,
            "retry_payment_clicked",
            username=callback.from_user.username,
            product=user_orders.get(user_id, {}).get('product'),
            packaging=user_orders.get(user_id, {}).get('packaging'),
            amount=(f"{int(user_orders[user_id]['price']) if isinstance(user_orders[user_id].get('price'), (int, float)) and float(user_orders[user_id]['price']).is_integer() else user_orders[user_id].get('price')} ‚ÇΩ" if user_orders.get(user_id, {}).get('price') is not None else None),
            order_number=user_orders.get(user_id, {}).get('order_number'),
            method="card",
        )
    await asyncio.sleep(10)
    from config import SUPPORT_USERNAME
    from keyboards import get_payment_retry_keyboard
    fail_text = (
        f"‚ùå *–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n"
        f"–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {SUPPORT_USERNAME}.\n"
        f"–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await safe_edit_text(callback.message, fail_text, reply_markup=get_payment_retry_keyboard())
    if logger:
        await log_payment_event(
            logger,
            user_id,
            "payment_not_found",
            username=callback.from_user.username,
            product=user_orders.get(user_id, {}).get('product'),
            packaging=user_orders.get(user_id, {}).get('packaging'),
            amount=(f"{int(user_orders[user_id]['price']) if isinstance(user_orders[user_id].get('price'), (int, float)) and float(user_orders[user_id]['price']).is_integer() else user_orders[user_id].get('price')} ‚ÇΩ" if user_orders.get(user_id, {}).get('price') is not None else None),
            order_number=user_orders.get(user_id, {}).get('order_number'),
            method="card",
        )

@dp.callback_query(F.data == "copy_card")
async def copy_card_handler(callback: CallbackQuery):
    card_number = os.getenv("CARD_NUMBER", "2200 0000 0000 0000")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    await callback.answer(f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n{card_number}", show_alert=True)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    if logger:
        await log_payment_event(logger, callback.from_user.id, "copy_card_clicked")

@dp.callback_query(F.data == "cancel_order")
async def cancel_order_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if user_id in user_orders:
        del user_orders[user_id]
    
    await safe_edit_text(callback.message, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await safe_edit_text(callback.message, "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "back_to_products")
async def back_to_products_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤"""
    await safe_edit_text(callback.message, "üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=get_products_keyboard())

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    stats = db.get_order_stats()
    user_count = db.get_user_count()
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {user_count}\n"
        f"üìà *–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:* {stats['total']}\n"
        f"üìÖ *–ó–∞ —Å–µ–≥–æ–¥–Ω—è:* {stats['today']}\n"
        f"üìä *–ó–∞ –Ω–µ–¥–µ–ª—é:* {stats['week']}"
    )
    
    await safe_edit_text(callback.message, stats_text, reply_markup=get_admin_keyboard())

@dp.callback_query(F.data == "admin_orders")
async def admin_orders_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    orders = db.get_orders(limit=10)
    
    if not orders:
        orders_text = "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        orders_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:**\n\n"
        for order in orders:
            orders_text += (
                f"üÜî **ID:** {order[0]}\n"
                f"üë§ **–ö–ª–∏–µ–Ω—Ç:** @{order[2]}\n"
                f"üõí **–¢–æ–≤–∞—Ä:** {order[3]}\n"
                f"üì¶ **–§–∞—Å–æ–≤–∫–∞:** {order[4]}\n"
                f"üè† **–ê–¥—Ä–µ—Å:** {order[5]}\n"
                f"üìÖ **–î–∞—Ç–∞:** {order[7]}\n\n"
            )
    
    await safe_edit_text(callback.message, orders_text, reply_markup=get_admin_keyboard())

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await safe_edit_text(callback.message, "üì¢ *–†–∞—Å—Å—ã–ª–∫–∞*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(AdminStates.waiting_for_broadcast_text)

@dp.message(AdminStates.waiting_for_broadcast_text)
async def admin_broadcast_send(message: Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    text = message.text
    user_ids = db.get_all_user_ids()
    ok, fail = 0, 0
    for uid in user_ids:
        try:
            await bot.send_message(uid, text)
            ok += 1
            await asyncio.sleep(0.05)
        except Exception:
            fail += 1
            continue
    await message.answer(f"üì¢ –ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}", reply_markup=get_admin_keyboard())
    await state.clear()

@dp.callback_query(F.data == "admin_reply")
async def admin_reply_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await safe_edit_text(callback.message, "üí¨ **–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_id)

@dp.message(AdminStates.waiting_for_user_id)
async def admin_user_id_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
        await state.update_data(target_user_id=user_id)
        
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state(AdminStates.waiting_for_admin_message)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(AdminStates.waiting_for_admin_message)
async def admin_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    admin_message = message.text
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            target_user_id,
            f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{admin_message}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_admin_response(target_user_id, admin_message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if logger:
            try:
                await log_admin_action(
                    logger=logger,
                    admin_id=message.from_user.id,
                    action="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    details=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {target_user_id}, –°–æ–æ–±—â–µ–Ω–∏–µ: {admin_message[:50]}..."
                )
            except Exception as e:
                await log_error(logger, f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        await message.answer(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        if logger:
            await log_error(logger, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@dp.callback_query(F.data == "admin_main")
async def admin_main_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await safe_edit_text(callback.message, "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global logger
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ event loop
    logger = setup_logging(bot)
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 