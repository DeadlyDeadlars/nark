import logging
import asyncio
from datetime import datetime
from typing import Optional
from aiogram import Bot
from config import BOT_TOKEN, LOGS_CHANNEL_ID, LOGS_CHANNEL_USERNAME

class TelegramChannelHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∫–∞–Ω–∞–ª"""
    
    def __init__(self, bot: Bot, channel_id: Optional[str] = None, channel_username: Optional[str] = None):
        super().__init__()
        self.bot = bot
        self.channel_id = channel_id
        self.channel_username = channel_username
        self.queue = asyncio.Queue()
        self.running = True
        self._processor_task = None
    
    def emit(self, record):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.running:
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self.format(record)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ event loop
                try:
                    loop = asyncio.get_running_loop()
                    asyncio.create_task(self.queue.put((record.levelname, message)))
                except RuntimeError:
                    # Event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                    print(f"[{record.levelname}] {message}")
            except Exception as e:
                # –ò–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def _message_processor(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.running:
            try:
                level, message = await asyncio.wait_for(self.queue.get(), timeout=1.0)
                await self._send_to_channel(level, message)
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞: {e}")
    
    def start_processor(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self._processor_task is None:
            try:
                loop = asyncio.get_running_loop()
                self._processor_task = asyncio.create_task(self._message_processor())
            except RuntimeError:
                # Event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ–∑–∂–µ
                pass
    
    async def _send_to_channel(self, level: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        if not self.channel_id:
            return
        
        try:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            level_emojis = {
                'DEBUG': 'üîç',
                'INFO': '‚ÑπÔ∏è',
                'WARNING': '‚ö†Ô∏è',
                'ERROR': '‚ùå',
                'CRITICAL': 'üö®'
            }
            
            emoji = level_emojis.get(level, 'üìù')
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫)
            channel_message = f"{emoji} {level}\n"
            channel_message += f"üïê {timestamp}\n"
            channel_message += f"üìÑ {message}\n"
            channel_message += "‚îÄ" * 30
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª (ID —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–∞–Ω–∞–ª–æ–≤)
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=channel_message,
                parse_mode=None,  # –æ—Ç–∫–ª—é—á–∞–µ–º Markdown/HTML –¥–ª—è –ª–æ–≥–æ–≤
                disable_web_page_preview=True
            )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.running = False
        if self._processor_task:
            self._processor_task.cancel()

def setup_logging(bot: Bot) -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π (–±–µ–∑ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)."""
    logger = logging.getLogger('delivery_bot')
    logger.setLevel(logging.INFO)
    logger.handlers.clear()
    formatter = logging.Formatter('%(message)s')

    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π handler, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª

    if LOGS_CHANNEL_ID:
        try:
            channel_handler = TelegramChannelHandler(
                bot=bot,
                channel_id=LOGS_CHANNEL_ID,
                channel_username=LOGS_CHANNEL_USERNAME
            )
            channel_handler.setLevel(logging.INFO)
            channel_handler.setFormatter(formatter)
            logger.addHandler(channel_handler)
            channel_handler.start_processor()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
    return logger

async def _send_startup_message(bot: Bot, logger: logging.Logger):
    # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    return

async def log_order(logger: logging.Logger, user_id: int, username: str, product: str, packaging: str, address: str, delivery_time: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order_message = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
    order_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
    order_message += f"üì¶ –¢–æ–≤–∞—Ä: {product}\n"
    order_message += f"‚öñÔ∏è –§–∞—Å–æ–≤–∫–∞: {packaging}\n"
    order_message += f"üè† –ê–¥—Ä–µ—Å: {address}\n"
    order_message += f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time} –º–∏–Ω."
    
    logger.info(order_message)

async def log_admin_action(logger: logging.Logger, admin_id: int, action: str, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_message = f"üë®‚Äçüíº –î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
    admin_message += f"üÜî –ê–¥–º–∏–Ω ID: {admin_id}\n"
    admin_message += f"üîß –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
    if details:
        admin_message += f"üìã –î–µ—Ç–∞–ª–∏: {details}"
    
    logger.info(admin_message)

async def log_error(logger: logging.Logger, error: str, context: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ\n\n"
    error_message += f"üö® –û—à–∏–±–∫–∞: {error}\n"
    if context:
        error_message += f"üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
    
    logger.error(error_message) 

async def log_payment_event(
    logger: logging.Logger,
    user_id: int,
    event: str,
    details: str = "",
    *,
    username: str | None = None,
    product: str | None = None,
    packaging: str | None = None,
    address: str | None = None,
    amount: str | None = None,
    order_number: int | None = None,
    method: str | None = None,
):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –æ–ø–ª–∞—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
    uname = f"@{username}" if username else "‚Äî"
    lines = [
        "üí≥ –°–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã",
        f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}",
        f"üë§ Username: {uname}",
        f"üìå –°–æ–±—ã—Ç–∏–µ: {event}",
    ]
    if method:
        lines.append(f"üíº –ú–µ—Ç–æ–¥: {method}")
    if order_number is not None:
        lines.append(f"#Ô∏è‚É£ –ó–∞–∫–∞–∑: {order_number}")
    if product is not None:
        lines.append(f"üõí –¢–æ–≤–∞—Ä: {product}")
    if packaging is not None:
        lines.append(f"‚öñÔ∏è –§–∞—Å–æ–≤–∫–∞: {packaging}")
    if amount is not None:
        lines.append(f"üíµ –°—É–º–º–∞: {amount}")
    if address is not None:
        lines.append(f"üè† –ê–¥—Ä–µ—Å: {address}")
    if details:
        lines.append(f"üìã –î–µ—Ç–∞–ª–∏: {details}")
    logger.info("\n".join(lines))

async def log_user_action(
    logger: logging.Logger,
    user_id: int,
    username: str | None,
    action: str,
    *,
    product: str | None = None,
    packaging: str | None = None,
    address: str | None = None,
):
    """–õ–æ–≥–∏ —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Å–Ω–∞–ø—à–æ—Ç–æ–º –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    uname = f"@{username}" if username else "‚Äî"
    lines = [
        "üß≠ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        f"üÜî ID: {user_id}",
        f"üë§ Username: {uname}",
        f"üìå –°–æ–±—ã—Ç–∏–µ: {action}",
    ]
    if product is not None:
        lines.append(f"üõí –¢–æ–≤–∞—Ä: {product}")
    if packaging is not None:
        lines.append(f"‚öñÔ∏è –§–∞—Å–æ–≤–∫–∞: {packaging}")
    if address is not None:
        lines.append(f"üè† –ê–¥—Ä–µ—Å: {address}")
    logger.info("\n".join(lines))