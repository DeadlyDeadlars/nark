#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

import asyncio
import random
from database import Database
from config import PRODUCTS, PACKAGING_OPTIONS, MIN_DELIVERY_TIME, MAX_DELIVERY_TIME

class BotTester:
    def __init__(self):
        self.db = Database()
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
            order_id = self.db.add_order(
                user_id=123456789,
                username="test_user",
                product="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                packaging="1 –≥",
                address="–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
                delivery_time=60
            )
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ID: {order_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_order_stats()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ - {stats['total']}")
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def test_config(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
        print(f"üì¶ –¢–æ–≤–∞—Ä—ã: {list(PRODUCTS.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞—Å–æ–≤–∫—É
        print(f"üìã –§–∞—Å–æ–≤–∫–∞: {PACKAGING_OPTIONS}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
        print(f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {MIN_DELIVERY_TIME}-{MAX_DELIVERY_TIME} –º–∏–Ω—É—Ç")
        
        return True
    
    def generate_test_orders(self, count=5):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        print(f"\nüîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
        
        test_users = [
            {"id": 111111111, "username": "user1"},
            {"id": 222222222, "username": "user2"},
            {"id": 333333333, "username": "user3"},
            {"id": 444444444, "username": "user4"},
            {"id": 555555555, "username": "user5"}
        ]
        
        test_addresses = [
            "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 5",
            "–ø—Ä. –ú–∏—Ä–∞, –¥. 15, –∫–≤. 12",
            "—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. 8, –∫–≤. 3",
            "–ø—Ä. –ü–æ–±–µ–¥—ã, –¥. 25, –∫–≤. 7",
            "—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, –¥. 10, –∫–≤. 15"
        ]
        
        for i in range(count):
            user = test_users[i % len(test_users)]
            product_key = random.choice(list(PRODUCTS.keys()))
            product = PRODUCTS[product_key]
            packaging = random.choice(PACKAGING_OPTIONS)
            address = random.choice(test_addresses)
            delivery_time = random.randint(MIN_DELIVERY_TIME, MAX_DELIVERY_TIME)
            
            order_id = self.db.add_order(
                user_id=user["id"],
                username=user["username"],
                product=product,
                packaging=packaging,
                address=address,
                delivery_time=delivery_time
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID: {order_id} - {product} {packaging}")
        
        return True
    
    def test_admin_responses(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        test_user_id = 123456789
        test_message = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        try:
            self.db.add_admin_response(test_user_id, test_message)
            print("‚úÖ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    def display_test_results(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.db.get_order_stats()
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}")
        print(f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today']}")
        print(f"üìä –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        orders = self.db.get_orders(limit=3)
        if orders:
            print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:")
            for order in orders:
                print(f"  ID: {order[0]}, @{order[2]}, {order[3]} - {order[4]}")
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        conn = self.db.db_path
        import sqlite3
        db_conn = sqlite3.connect(conn)
        cursor = db_conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
        cursor.execute('''
            DELETE FROM orders 
            WHERE address LIKE '%–¢–µ—Å—Ç–æ–≤—ã–π%' OR address LIKE '%–õ–µ–Ω–∏–Ω–∞%'
        ''')
        deleted_count = cursor.rowcount
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute('''
            DELETE FROM admin_responses 
            WHERE admin_message LIKE '%—Ç–µ—Å—Ç–æ–≤–æ–µ%'
        ''')
        
        db_conn.commit()
        db_conn.close()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏")
    print("=" * 50)
    
    tester = BotTester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", tester.test_database_connection),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", tester.test_config),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤", lambda: tester.generate_test_orders(3)),
        ("–û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", tester.test_admin_responses)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                passed_tests += 1
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.display_test_results()
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ
    cleanup = input("\nüßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower()
    if cleanup == 'y':
        tester.cleanup_test_data()
    
    print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 