#!/usr/bin/env python3
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

import sqlite3
import json
from datetime import datetime, timedelta
from config import DATABASE_PATH

class AdminPanel:
    def __init__(self):
        self.db_path = DATABASE_PATH
    
    def get_detailed_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM orders')
        total_orders = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        cursor.execute('''
            SELECT DATE(order_date), COUNT(*) 
            FROM orders 
            WHERE order_date >= datetime('now', '-7 days')
            GROUP BY DATE(order_date)
            ORDER BY DATE(order_date) DESC
        ''')
        daily_stats = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        cursor.execute('''
            SELECT product, COUNT(*) 
            FROM orders 
            GROUP BY product 
            ORDER BY COUNT(*) DESC
        ''')
        product_stats = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞—Å–æ–≤–∫–µ
        cursor.execute('''
            SELECT packaging, COUNT(*) 
            FROM orders 
            GROUP BY packaging 
            ORDER BY COUNT(*) DESC
        ''')
        packaging_stats = cursor.fetchall()
        
        conn.close()
        
        return {
            'total_orders': total_orders,
            'daily_stats': daily_stats,
            'product_stats': product_stats,
            'packaging_stats': packaging_stats
        }
    
    def export_orders_to_json(self, filename='orders_export.json'):
        """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, user_id, username, product, packaging, address, 
                   delivery_time, order_date, status
            FROM orders 
            ORDER BY order_date DESC
        ''')
        
        orders = cursor.fetchall()
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        orders_list = []
        for order in orders:
            orders_list.append({
                'id': order[0],
                'user_id': order[1],
                'username': order[2],
                'product': order[3],
                'packaging': order[4],
                'address': order[5],
                'delivery_time': order[6],
                'order_date': order[7],
                'status': order[8]
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(orders_list, f, ensure_ascii=False, indent=2)
        
        return len(orders_list)
    
    def get_user_activity(self, days=7):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT username, COUNT(*) as order_count, 
                   MAX(order_date) as last_order
            FROM orders 
            WHERE order_date >= datetime('now', '-{} days')
            GROUP BY user_id, username
            ORDER BY order_count DESC
        '''.format(days))
        
        user_activity = cursor.fetchall()
        conn.close()
        
        return user_activity
    
    def search_orders(self, query):
        """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
        cursor.execute('''
            SELECT * FROM orders 
            WHERE address LIKE ? OR product LIKE ? OR username LIKE ?
            ORDER BY order_date DESC
        ''', (f'%{query}%', f'%{query}%', f'%{query}%'))
        
        results = cursor.fetchall()
        conn.close()
        
        return results
    
    def delete_order(self, order_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM orders WHERE id = ?', (order_id,))
        deleted_count = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        return deleted_count > 0
    
    def update_order_status(self, order_id, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE orders 
            SET status = ? 
            WHERE id = ?
        ''', (status, order_id))
        
        updated_count = cursor.rowcount
        conn.commit()
        conn.close()
        
        return updated_count > 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin = AdminPanel()
    
    print("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("2. –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ JSON")
        print("3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("4. –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤")
        print("5. –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")
        print("6. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
        
        if choice == "1":
            stats = admin.get_detailed_stats()
            print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}")
            
            print("\nüìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:")
            for date, count in stats['daily_stats']:
                print(f"  {date}: {count} –∑–∞–∫–∞–∑–æ–≤")
            
            print("\nüõí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:")
            for product, count in stats['product_stats']:
                print(f"  {product}: {count} –∑–∞–∫–∞–∑–æ–≤")
        
        elif choice == "2":
            count = admin.export_orders_to_json()
            print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –∑–∞–∫–∞–∑–æ–≤ –≤ orders_export.json")
        
        elif choice == "3":
            days = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): ")
            days = int(days) if days.isdigit() else 7
            
            activity = admin.get_user_activity(days)
            print(f"\nüë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {days} –¥–Ω–µ–π:")
            for username, count, last_order in activity:
                print(f"  @{username}: {count} –∑–∞–∫–∞–∑–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–π: {last_order}")
        
        elif choice == "4":
            query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ")
            results = admin.search_orders(query)
            print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–∫–∞–∑–æ–≤:")
            for order in results[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  ID: {order[0]}, @{order[2]}, {order[3]} - {order[4]}")
        
        elif choice == "5":
            order_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
            if order_id.isdigit():
                success = admin.delete_order(int(order_id))
                print("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω" if success else "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        
        elif choice == "6":
            order_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞: ")
            status = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ")
            if order_id.isdigit():
                success = admin.update_order_status(int(order_id), status)
                print("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω" if success else "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 