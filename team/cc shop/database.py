import sqlite3
import json
import random
from datetime import datetime
from typing import Optional, List, Dict, Any

class Database:
    def __init__(self, db_path: str = "shop_bot.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                balance REAL DEFAULT 0.0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                language TEXT DEFAULT 'ru'
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                category TEXT NOT NULL,
                emoji TEXT,
                quantity INTEGER DEFAULT -1,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                product_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                payment_id TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                unit_price REAL,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (product_id) REFERENCES products (product_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS favorites (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                product_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (product_id) REFERENCES products (product_id),
                UNIQUE(user_id, product_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS webhook_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                webhook_type TEXT NOT NULL,
                payload TEXT,
                processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                success INTEGER DEFAULT 0,
                error_message TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS product_deliveries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                user_id INTEGER,
                product_id INTEGER,
                delivered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                delivery_method TEXT DEFAULT 'manual',
                FOREIGN KEY (order_id) REFERENCES orders (id),
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (product_id) REFERENCES products (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS countries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                code TEXT NOT NULL UNIQUE,
                flag TEXT,
                is_active BOOLEAN DEFAULT 1
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ BIN'–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                country_id INTEGER,
                bin_number TEXT NOT NULL,
                bank_name TEXT,
                card_type TEXT,
                is_active BOOLEAN DEFAULT 1,
                FOREIGN KEY (country_id) REFERENCES countries (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        self.migrate_database()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        self.add_initial_products()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã –∏ BIN'—ã
        self.add_countries_and_bins()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BIN'–æ–≤
        self.refresh_bins_daily()
    
    def initialize_bins_if_empty(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BIN'–æ–≤ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ BIN'—ã
            cursor.execute('SELECT COUNT(*) FROM bins')
            bins_count = cursor.fetchone()[0]
            
            if bins_count == 0:
                print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BIN'–æ–≤...")
                self.generate_random_bins_for_all_countries()
                print("‚úÖ BIN'—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            else:
                print(f"‚úÖ BIN'—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {bins_count} –∑–∞–ø–∏—Å–µ–π")
            
            conn.close()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BIN'–æ–≤: {e}")
    
    def add_initial_products(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω"""
        products = [
            # CHEAP MANUALS
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–∞", "–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–∞ - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 300.0, "CHEAP MANUALS", "üìñ", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å Crypto.com + –±–∏–Ω—ã", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Crypto.com —Å –±–∏–Ω–∞–º–∏ - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 200.0, "CHEAP MANUALS", "üíµ", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å Coinbase", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Coinbase - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 200.0, "CHEAP MANUALS", "üèß", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å goat.com", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ goat.com - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 100.0, "CHEAP MANUALS", "üëü", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥–∏—Ñ—Ç–∞–º–∏", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥–∏—Ñ—Ç–∞–º–∏ - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 90.0, "CHEAP MANUALS", "üéÅ", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å Enroll", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Enroll - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 90.0, "CHEAP MANUALS", "üìù", -1),
            
            # CHEAP MERCHANT
            ("2d shop electric USA/CA", "2d –º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–∏–∫–∏ –°–®–ê/–ö–∞–Ω–∞–¥–∞", 200.0, "CHEAP MERCHANT", "‚ö°", -1),
            ("2d merch casino KYC CRYPTO", "2d –º–µ—Ä—á –∫–∞–∑–∏–Ω–æ —Å KYC", 100.0, "CHEAP MERCHANT", "üé∞", -1),
            ("3d btc merch", "3d –º–µ—Ä—á –¥–ª—è Bitcoin", 220.0, "CHEAP MERCHANT", "‚Çø", -1),
            ("2d shop jewelry", "2d –º–∞–≥–∞–∑–∏–Ω —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π", 100.0, "CHEAP MERCHANT", "üíé", -1),
            ("2d merchant for Apple", "2d –º–µ—Ä—á–∞–Ω—Ç –¥–ª—è Apple", 100.0, "CHEAP MERCHANT", "üçé", -1),
            
            # –û–±—É—á–µ–Ω–∏–µ
            ("–û–±—É—á–µ–Ω–∏–µ (–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)", "–ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 299.0, "–û–±—É—á–µ–Ω–∏–µ", "üìö", -1),
            ("–û–±—É—á–µ–Ω–∏–µ (–ü–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)", "–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 1666.0, "–û–±—É—á–µ–Ω–∏–µ", "üéì", -1),
            ("–û–±—É—á–µ–Ω–∏–µ (LUXURY VERSION)", "Luxury –≤–µ—Ä—Å–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 4999.0, "–û–±—É—á–µ–Ω–∏–µ", "üëë", -1),
            
            # MANUALS
            ("–°—Ç–∞—Ç—å—è/–º–∞–Ω—É–∞–ª –ø–æ–¥ –∑–∞–∫–∞–∑", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–∞–Ω—É–∞–ª - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 500.0, "MANUALS", "üìã", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ Tax Refund", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –≤–æ–∑–≤—Ä–∞—Ç—É - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 200.0, "MANUALS", "üí∞", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å Interac –∏ –∫–∞–Ω–∞–¥—Å–∫–∏–º–∏ –±–∞–Ω–∫–∞–º–∏", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Interac –∏ –±–∞–Ω–∫–∞–º –ö–∞–Ω–∞–¥—ã - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 999.0, "MANUALS", "üè¶", -1),
            ("–ú–∞–Ω—É–∞–ª –∫–∞–∫ –∑–∞–ª–∏–≤–∞—Ç—å –≤ —Å–∞–º–æ—Ä–µ–≥–∏ –±–∞", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é —Å–∞–º–æ—Ä–µ–≥–æ–≤ - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 400.0, "MANUALS", "üí≥", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é –∫—Ä–µ–¥–∏—Ç–∫–∏ –Ω–∞ —Ñ—É–ª–ª–∫–∏ US/–ö–∞–Ω–∞–¥—ã", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –∫–∞—Ä—Ç–∞–º - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 400.0, "MANUALS", "üí≥", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å —á–µ–∫–∞–º–∏ –°–®–ê", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —á–µ–∫–∞–º –°–®–ê - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 600.0, "MANUALS", "üßæ", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –ª–æ–≥–∞–º–∏ –°–®–ê", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ª–æ–≥–∞–º - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 600.0, "MANUALS", "üèõÔ∏è", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é —Å–∞–º–æ—Ä–µ–≥–æ–≤ –±–∞", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é —Å–∞–º–æ—Ä–µ–≥–æ–≤ - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 500.0, "MANUALS", "üè¶", -1),
            ("–ú–∞–Ω—É–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–º–ø–∞–º–∏", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –¥–∞–º–ø–∞–º - –æ–±—É—á–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞", 650.0, "MANUALS", "üíæ", -1),
            
            # MERCHANT
            ("2d merch casino NO KYC CRYPTO", "2d –º–µ—Ä—á –∫–∞–∑–∏–Ω–æ –±–µ–∑ KYC", 333.0, "MERCHANT", "üé∞", -1),
            ("POS Terminal –Ω–∞ iPhone –ø–æ–¥ –∑–∞–∫–∞–∑", "POS —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è iPhone", 777.0, "MERCHANT", "üì±", -1),
            ("–ö–æ–Ω—Ç–æ—Ä–∞ –ø–æ–¥ Apple Pay –∏ –¥–µ–±–µ—Ç–∫–∏", "–ö–æ–Ω—Ç–æ—Ä–∞ –¥–ª—è Apple Pay –∏ –¥–µ–±–µ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç", 390.0, "MERCHANT", "üçé", -1),
            
            # CC
            ("GOOD QUALITY SPAM CC`s", "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–∞–º CC", 25.0, "CC", "üì±", -1),
            ("VHQ SNIFFER CC`s", "VHQ —Å–Ω–∏—Ñ—Ñ–µ—Ä CC", 30.0, "CC", "‚úÖ", -1),
            ("VHQ BASE RICH", "VHQ –±–∞–∑–∞ –±–æ–≥–∞—Ç—ã—Ö", 35.0, "CC", "üî•", -1),
        ]
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        cursor.execute('DELETE FROM products')
        
        for product in products:
            cursor.execute('''
                INSERT OR IGNORE INTO products (name, description, price, category, emoji, quantity)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', product)
        
        conn.commit()
        conn.close()
    
    def add_countries_and_bins(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω –∏ BIN'–æ–≤"""
        countries = [
            ("UNITED STATES", "US", "üá∫üá∏"),
            ("UNITED ARAB EMIRATES", "AE", "üá¶üá™"),
            ("ALBANIA", "AL", "üá¶üá±"),
            ("AUSTRIA", "AT", "üá¶üáπ"),
            ("BANGLADESH", "BD", "üáßüá©"),
            ("BULGARIA", "BG", "üáßüá¨"),
            ("BENIN", "BJ", "üáßüáØ"),
            ("BRAZIL", "BR", "üáßüá∑"),
            ("CANADA", "CA", "üá®üá¶"),
            ("CONGO", "CG", "üá®üá¨"),
            ("C√îTE D'IVOIRE", "CI", "üá®üáÆ"),
            ("ANTIGUA AND BARBUDA", "AG", "üá¶üá¨"),
            ("ARGENTINA", "AR", "üá¶üá∑"),
            ("AUSTRALIA", "AU", "üá¶üá∫"),
            ("BELGIUM", "BE", "üáßüá™"),
            ("BAHRAIN", "BH", "üáßüá≠"),
            ("BOLIVIA", "BO", "üáßüá¥"),
            ("BOTSWANA", "BW", "üáßüáº"),
            ("CONGO, DEMOCRATIC REPUBLIC", "CD", "üá®üá©"),
            ("SWITZERLAND", "CH", "üá®üá≠"),
            ("CHILE", "CL", "üá®üá±"),
            ("CHINA", "CN", "üá®üá≥"),
            ("COLOMBIA", "CO", "üá®üá¥"),
            ("COSTA RICA", "CR", "üá®üá∑"),
            ("CUBA", "CU", "üá®üá∫"),
            ("CYPRUS", "CY", "üá®üáæ"),
            ("CZECH REPUBLIC", "CZ", "üá®üáø"),
            ("GERMANY", "DE", "üá©üá™"),
            ("DENMARK", "DK", "üá©üá∞"),
            ("DOMINICAN REPUBLIC", "DO", "üá©üá¥"),
            ("ALGERIA", "DZ", "üá©üáø"),
            ("ECUADOR", "EC", "üá™üá®"),
            ("ESTONIA", "EE", "üá™üá™"),
            ("EGYPT", "EG", "üá™üá¨"),
            ("SPAIN", "ES", "üá™üá∏"),
            ("FINLAND", "FI", "üá´üáÆ"),
            ("FRANCE", "FR", "üá´üá∑"),
            ("UNITED KINGDOM", "GB", "üá¨üáß"),
            ("GEORGIA", "GE", "üá¨üá™"),
            ("GHANA", "GH", "üá¨üá≠"),
            ("GREECE", "GR", "üá¨üá∑"),
            ("HONG KONG", "HK", "üá≠üá∞"),
            ("CROATIA", "HR", "üá≠üá∑"),
            ("HUNGARY", "HU", "üá≠üá∫"),
            ("INDONESIA", "ID", "üáÆüá©"),
            ("IRELAND", "IE", "üáÆüá™"),
            ("ISRAEL", "IL", "üáÆüá±"),
            ("INDIA", "IN", "üáÆüá≥"),
            ("IRAQ", "IQ", "üáÆüá∂"),
            ("IRAN", "IR", "üáÆüá∑"),
            ("ICELAND", "IS", "üáÆüá∏"),
            ("ITALY", "IT", "üáÆüáπ"),
            ("JAMAICA", "JM", "üáØüá≤"),
            ("JORDAN", "JO", "üáØüá¥"),
            ("JAPAN", "JP", "üáØüáµ"),
            ("KENYA", "KE", "üá∞üá™"),
            ("KYRGYZSTAN", "KG", "üá∞üá¨"),
            ("CAMBODIA", "KH", "üá∞üá≠"),
            ("SOUTH KOREA", "KR", "üá∞üá∑"),
            ("KAZAKHSTAN", "KZ", "üá∞üáø"),
            ("LEBANON", "LB", "üá±üáß"),
            ("LIBYA", "LY", "üá±üáæ"),
            ("MOROCCO", "MA", "üá≤üá¶"),
            ("MOLDOVA", "MD", "üá≤üá©"),
            ("MONTENEGRO", "ME", "üá≤üá™"),
            ("MADAGASCAR", "MG", "üá≤üá¨"),
            ("MACEDONIA", "MK", "üá≤üá∞"),
            ("MALI", "ML", "üá≤üá±"),
            ("MONGOLIA", "MN", "üá≤üá≥"),
            ("MEXICO", "MX", "üá≤üáΩ"),
            ("MALAYSIA", "MY", "üá≤üáæ"),
            ("NIGERIA", "NG", "üá≥üá¨"),
            ("NETHERLANDS", "NL", "üá≥üá±"),
            ("NORWAY", "NO", "üá≥üá¥"),
            ("NEPAL", "NP", "üá≥üáµ"),
            ("NEW ZEALAND", "NZ", "üá≥üáø"),
            ("OMAN", "OM", "üá¥üá≤"),
            ("PANAMA", "PA", "üáµüá¶"),
            ("PERU", "PE", "üáµüá™"),
            ("PHILIPPINES", "PH", "üáµüá≠"),
            ("PAKISTAN", "PK", "üáµüá∞"),
            ("POLAND", "PL", "üáµüá±"),
            ("PORTUGAL", "PT", "üáµüáπ"),
            ("PARAGUAY", "PY", "üáµüáæ"),
            ("QATAR", "QA", "üá∂üá¶"),
            ("ROMANIA", "RO", "üá∑üá¥"),
            ("SERBIA", "RS", "üá∑üá∏"),
            ("RUSSIA", "RU", "üá∑üá∫"),
            ("RWANDA", "RW", "üá∑üáº"),
            ("SAUDI ARABIA", "SA", "üá∏üá¶"),
            ("SINGAPORE", "SG", "üá∏üá¨"),
            ("SLOVAKIA", "SK", "üá∏üá∞"),
            ("SLOVENIA", "SI", "üá∏üáÆ"),
            ("SOMALIA", "SO", "üá∏üá¥"),
            ("SOUTH AFRICA", "ZA", "üáøüá¶"),
            ("SWEDEN", "SE", "üá∏üá™"),
            ("SYRIA", "SY", "üá∏üáæ"),
            ("THAILAND", "TH", "üáπüá≠"),
            ("TUNISIA", "TN", "üáπüá≥"),
            ("TURKEY", "TR", "üáπüá∑"),
            ("UKRAINE", "UA", "üá∫üá¶"),
            ("UGANDA", "UG", "üá∫üá¨"),
            ("URUGUAY", "UY", "üá∫üáæ"),
            ("UZBEKISTAN", "UZ", "üá∫üáø"),
            ("VENEZUELA", "VE", "üáªüá™"),
            ("VIETNAM", "VN", "üáªüá≥"),
            ("YEMEN", "YE", "üáæüá™"),
        ]
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã
        for country in countries:
            cursor.execute('''
                INSERT OR IGNORE INTO countries (name, code, flag)
                VALUES (?, ?, ?)
            ''', country)
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ BIN'—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º BIN'—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω...")
        self.generate_random_bins_for_all_countries()
        print("‚úÖ BIN'—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    
    def generate_random_bins_for_all_countries(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ BIN'—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ BIN'—ã
            cursor.execute('DELETE FROM bins')
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
            cursor.execute('SELECT id, code FROM countries WHERE is_active = 1')
            countries = cursor.fetchall()
            
            # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç
            card_types = ["Visa", "MasterCard", "American Express", "Discover", "JCB", "UnionPay"]
            
            for country_id, country_code in countries:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç 5 –¥–æ 8 BIN'–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
                num_bins = random.randint(5, 8)
                
                for _ in range(num_bins):
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π BIN
                    bin_number = str(random.randint(100000, 999999))
                    
                    # –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã
                    card_type = random.choice(card_types)
                    
                    cursor.execute('''
                        INSERT INTO bins (country_id, bin_number, bank_name, card_type, is_active)
                        VALUES (?, ?, ?, ?, 1)
                    ''', (country_id, bin_number, None, card_type))
            
            conn.commit()
            conn.close()
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ BIN'–æ–≤ –¥–ª—è {len(countries)} —Å—Ç—Ä–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BIN'–æ–≤: {e}")
            if 'conn' in locals():
                conn.close()
    
    def add_country_if_missing(self, name: str, code: str, flag: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT id FROM countries WHERE code = ?', (code,))
            row = cursor.fetchone()
            if row:
                cursor.execute('UPDATE countries SET is_active = 1, name = ?, flag = ? WHERE code = ?', (name, flag, code))
                conn.commit()
                conn.close()
                return False
            cursor.execute('INSERT INTO countries (name, code, flag, is_active) VALUES (?, ?, ?, 1)', (name, code, flag))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Error ensuring country {code}: {e}")
            try:
                conn.close()
            except Exception:
                pass
            return False
    
    def generate_bins_for_country(self, country_code: str) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç BIN'—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö BIN'–æ–≤."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT id FROM countries WHERE code = ? AND is_active = 1', (country_code,))
            row = cursor.fetchone()
            if not row:
                conn.close()
                return 0
            country_id = row[0]
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ BIN'—ã —Å—Ç—Ä–∞–Ω—ã
            cursor.execute('DELETE FROM bins WHERE country_id = ?', (country_id,))
            card_types = ["Visa", "MasterCard", "American Express", "Discover", "JCB", "UnionPay"]
            created = 0
            num_bins = random.randint(5, 8)
            for _ in range(num_bins):
                bin_number = str(random.randint(100000, 999999))
                bank_name = f"Bank {random.randint(100, 999)}"
                card_type = random.choice(card_types)
                cursor.execute('INSERT INTO bins (country_id, bin_number, bank_name, card_type, is_active) VALUES (?, ?, ?, ?, 1)', (country_id, bin_number, bank_name, card_type))
                created += 1
            conn.commit()
            conn.close()
            return created
        except Exception as e:
            print(f"Error generating bins for {country_code}: {e}")
            try:
                conn.close()
            except Exception:
                pass
            return 0
    
    def refresh_bins_daily(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ BIN'–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
        import threading
        import time
        
        def refresh_loop():
            while True:
                try:
                    # –ñ–¥–µ–º 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
                    time.sleep(86400)
                    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ BIN'–æ–≤...")
                    self.generate_random_bins_for_all_countries()
                    print("‚úÖ BIN'—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è BIN'–æ–≤: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        refresh_thread = threading.Thread(target=refresh_loop, daemon=True)
        refresh_thread.start()
        print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BIN'–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)")
    
    def get_countries(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM countries WHERE is_active = 1 ORDER BY id')
            countries = cursor.fetchall()
            conn.close()
            
            if countries:
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, country)) for country in countries]
            return []
        except Exception as e:
            print(f"Error getting countries: {e}")
            return []
    
    def get_bins_by_country(self, country_code: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ BIN'–æ–≤ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT b.* FROM bins b
                JOIN countries c ON b.country_id = c.id
                WHERE c.code = ? AND b.is_active = 1
                ORDER BY b.bin_number
            ''', (country_code,))
            bins = cursor.fetchall()
            conn.close()
            
            if bins:
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, bin_data)) for bin_data in bins]
            return []
        except Exception as e:
            print(f"Error getting bins by country: {e}")
            return []
    
    def add_user(self, user_id: int, username: str = None, first_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name)
                VALUES (?, ?, ?)
            ''', (user_id, username, first_name))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Error adding user: {e}")
            return False
    
    def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()
            conn.close()
            
            if user:
                columns = [description[0] for description in cursor.description]
                return dict(zip(columns, user))
            return None
        except Exception as e:
            print(f"Error getting user: {e}")
            return None
    
    def update_balance(self, user_id: int, amount: float) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE users SET balance = balance + ? WHERE user_id = ?
            ''', (amount, user_id))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Error updating balance: {e}")
            return False
    
    def add_balance(self, user_id: int, amount: float) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–ª–∏–∞—Å –¥–ª—è update_balance)"""
        return self.update_balance(user_id, amount)
    
    def get_order_by_payment_id(self, payment_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, p.name, p.emoji, p.category, o.unit_price
                FROM orders o 
                LEFT JOIN products p ON o.product_id = p.id 
                WHERE o.payment_id = ?
            ''', (payment_id,))
            order = cursor.fetchone()
            conn.close()
            
            if order:
                columns = [description[0] for description in cursor.description]
                order_dict = dict(zip(columns, order))
                
                # –î–æ–±–∞–≤–ª—è–µ–º product_price –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                order_dict['product_price'] = order_dict.get('unit_price')
                
                return order_dict
            return None
        except Exception as e:
            print(f"Error getting order by payment ID: {e}")
            return None
    
    def get_order_by_id(self, order_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, p.name, p.emoji, p.category, o.unit_price
                FROM orders o 
                LEFT JOIN products p ON o.product_id = p.id 
                WHERE o.id = ?
            ''', (order_id,))
            order = cursor.fetchone()
            conn.close()
            
            if order:
                columns = [description[0] for description in cursor.description]
                order_dict = dict(zip(columns, order))
                
                # –î–æ–±–∞–≤–ª—è–µ–º product_price –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                order_dict['product_price'] = order_dict.get('unit_price')
                
                return order_dict
            return None
        except Exception as e:
            print(f"Error getting order by ID: {e}")
            return None
    
    def update_order_status(self, order_id: int, status: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE orders 
                SET status = ?, updated_at = datetime('now')
                WHERE id = ?
            ''', (status, order_id))
            
            rows_affected = cursor.rowcount
            conn.commit()
            conn.close()
            
            if rows_affected > 0:
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
                return True
            else:
                print(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
            if 'conn' in locals():
                conn.close()
            return False
    
    def log_webhook(self, webhook_type: str, payload: str, success: bool, error_message: str = None) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO webhook_logs (webhook_type, payload, success, error_message)
                VALUES (?, ?, ?, ?)
            ''', (webhook_type, payload, 1 if success else 0, error_message))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Error logging webhook: {e}")
            return False
    
    def log_product_delivery(self, order_id: int, user_id: int, product_id: int, delivered_at: datetime) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO product_deliveries (order_id, user_id, product_id, delivered_at)
                VALUES (?, ?, ?, ?)
            ''', (order_id, user_id, product_id, delivered_at))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Error logging product delivery: {e}")
            return False
    
    def get_last_webhook_time(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–µ–±—Ö—É–∫–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT processed_at FROM webhook_logs ORDER BY processed_at DESC LIMIT 1')
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else None
        except Exception as e:
            print(f"Error getting last webhook time: {e}")
            return None
    
    def get_total_webhooks(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ–±—Ö—É–∫–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM webhook_logs')
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else 0
        except Exception as e:
            print(f"Error getting total webhooks: {e}")
            return 0
    
    def get_successful_webhooks(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM webhook_logs WHERE success = 1')
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else 0
        except Exception as e:
            print(f"Error getting successful webhooks: {e}")
            return 0
    
    def get_products(self, category: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if category:
                cursor.execute('''
                    SELECT * FROM products WHERE category = ? AND is_active = 1
                    ORDER BY price ASC
                ''', (category,))
            else:
                cursor.execute('''
                    SELECT * FROM products WHERE is_active = 1 ORDER BY price ASC
                ''')
            
            products = cursor.fetchall()
            conn.close()
            
            if products:
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, product)) for product in products]
            return []
        except Exception as e:
            print(f"Error getting products: {e}")
            return []
    
    def get_product(self, product_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM products WHERE id = ? AND is_active = 1', (product_id,))
            product = cursor.fetchone()
            conn.close()
            
            if product:
                columns = [description[0] for description in cursor.description]
                return dict(zip(columns, product))
            return None
        except Exception as e:
            print(f"Error getting product: {e}")
            return None
    
    def create_order(self, user_id: int, product_id: int, amount: float, payment_id: str = None) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            product = None
            if product_id > 0:  # –ù–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                cursor.execute('SELECT name, price, emoji, category FROM products WHERE id = ?', (product_id,))
                product = cursor.fetchone()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            unit_price = product[1] if product else None
            cursor.execute('''
                INSERT INTO orders (user_id, product_id, amount, payment_id, status, created_at, unit_price)
                VALUES (?, ?, ?, ?, ?, datetime('now'), ?)
            ''', (user_id, product_id, amount, payment_id, 'pending', unit_price))
            
            order_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID={order_id}, user_id={user_id}, amount={amount}")
            return order_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            if 'conn' in locals():
                conn.close()
            return -1
    
    def update_order_status(self, order_id: int, status: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE orders 
                SET status = ?, updated_at = datetime('now')
                WHERE id = ?
            ''', (status, order_id))
            
            rows_affected = cursor.rowcount
            conn.commit()
            conn.close()
            
            if rows_affected > 0:
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
                return True
            else:
                print(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
            if 'conn' in locals():
                conn.close()
            return False
    
    def get_user_orders(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT o.*, p.name, p.emoji, p.category, o.unit_price
                FROM orders o 
                LEFT JOIN products p ON o.product_id = p.id 
                WHERE o.user_id = ?
                ORDER BY o.created_at DESC
            ''', (user_id,))
            orders = cursor.fetchall()
            conn.close()
            
            if orders:
                columns = [description[0] for description in cursor.description]
                result = []
                for order in orders:
                    order_dict = dict(zip(columns, order))
                    # –î–æ–±–∞–≤–ª—è–µ–º product_price –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    order_dict['product_price'] = order_dict.get('unit_price')
                    result.append(order_dict)
                return result
            return []
        except Exception as e:
            print(f"Error getting user orders: {e}")
            return []
    
    def add_to_favorites(self, user_id: int, product_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO favorites (user_id, product_id)
                VALUES (?, ?)
            ''', (user_id, product_id))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Error adding to favorites: {e}")
            return False
    
    def get_favorites(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT p.* FROM products p
                JOIN favorites f ON p.id = f.product_id
                WHERE f.user_id = ? AND p.is_active = 1
                ORDER BY p.price ASC
            ''', (user_id,))
            products = cursor.fetchall()
            conn.close()
            
            if products:
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, product)) for product in products]
            return []
        except Exception as e:
            print(f"Error getting favorites: {e}")
            return []

    def migrate_database(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ orders
            cursor.execute("PRAGMA table_info(orders)")
            columns = [column[1] for column in cursor.fetchall()]
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            missing_columns = []
            if 'unit_price' not in columns:
                missing_columns.append('unit_price')
            if 'updated_at' not in columns:
                missing_columns.append('updated_at')
            if 'status' not in columns:
                missing_columns.append('status')
            if 'created_at' not in columns:
                missing_columns.append('created_at')
            
            if missing_columns:
                print(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
                cursor.execute('''
                    CREATE TABLE orders_new (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        product_id INTEGER NOT NULL,
                        amount REAL NOT NULL,
                        payment_id TEXT,
                        status TEXT DEFAULT 'pending',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        unit_price REAL,
                        FOREIGN KEY (user_id) REFERENCES users (user_id),
                        FOREIGN KEY (product_id) REFERENCES products (product_id)
                    )
                ''')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute('''
                    INSERT INTO orders_new (id, user_id, product_id, amount, payment_id, status, created_at, updated_at, unit_price)
                    SELECT id, user_id, product_id, amount, payment_id, 
                           COALESCE(status, 'pending') as status,
                           COALESCE(created_at, CURRENT_TIMESTAMP) as created_at,
                           COALESCE(updated_at, CURRENT_TIMESTAMP) as updated_at,
                           unit_price
                    FROM orders
                ''')
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                cursor.execute('DROP TABLE orders')
                cursor.execute('ALTER TABLE orders_new RENAME TO orders')
                
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            conn.commit()
            conn.close()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            if 'conn' in locals():
                conn.close()

