import asyncio
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, Defaults
from telegram.constants import ParseMode
from database import Database
from cryptobot import CryptoBot
from config import BOT_TOKEN, OWNER_USERNAME, BOT_NAME, ADMIN_CHANNEL_ID, ADMIN_IDS, TON_USDT_WALLET, TRX_USDT_WALLET
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞
db = Database()
crypto_bot = CryptoBot()

class ShopBot:
    def __init__(self):
        self.application = (
            Application
            .builder()
            .token(BOT_TOKEN)
            .defaults(Defaults(parse_mode=ParseMode.MARKDOWN))
            .build()
        )
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("rules", self.rules_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("refresh_bins", self.refresh_bins_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
        self.application.add_handler(MessageHandler(filters.Regex("^–ö–∞–±–∏–Ω–µ—Ç/Profile$"), self.profile_command))
        self.application.add_handler(MessageHandler(filters.Regex("^–¢–æ–≤–∞—Ä—ã/Products$"), self.products_command))
        self.application.add_handler(MessageHandler(filters.Regex("^–ü—Ä–∞–≤–∏–ª–∞/Rules$"), self.rules_command))
        self.application.add_handler(MessageHandler(filters.Regex("^Reviews$"), self.reviews_command))
        self.application.add_handler(MessageHandler(filters.Regex("^Help$"), self.help_command))
        self.application.add_handler(MessageHandler(filters.Regex("^Showcase$"), self.showcase_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user_id, user.username, user.first_name)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("–ö–∞–±–∏–Ω–µ—Ç/Profile"), KeyboardButton("–¢–æ–≤–∞—Ä—ã/Products")],
            [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞/Rules"), KeyboardButton("Reviews")],
            [KeyboardButton("Help"), KeyboardButton("Showcase")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
ü§ù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ {BOT_NAME}

üëë OWNER: @luxury_sup
üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: https://t.me/luxury_manuals
‚úÖ –ö–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤: https://t.me/+qlf6Er2I23JjZTlh
üìú –ü—Ä–∞–≤–∏–ª–∞: https://telegra.ph/Pravila-proekta-08-19-2

üî• –ò—Å–ø–æ–ª—å–∑—É—è {BOT_NAME}, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚úÖ
        """.strip()
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=None)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è"""
        user = update.effective_user
        user_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = db.get_user(user_id)
        if not user_info:
            db.add_user(user_id, user.username, user.first_name)
            user_info = db.get_user(user_id)
        
        balance = user_info.get('balance', 0.0)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/Top up", callback_data="top_up_balance")],
            [
                InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/Favorite", callback_data="favorites"),
                InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞/Rules", callback_data="rules")
            ],
            [InlineKeyboardButton("üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤/Order history", callback_data="order_history")],
            [InlineKeyboardButton("üé´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω/Activate coupon", callback_data="activate_coupon")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        profile_text = f"""
üíô **–ò–º—è:** {user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üîë **ID:** {user_id}
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {balance} $
        """.strip()
        
        await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode=None)
    
    async def products_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–≤–∞—Ä–æ–≤"""
        await update.message.reply_text("üì¶ –¢–æ–≤–∞—Ä—ã/Products")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = [
            [InlineKeyboardButton("üìñ CHEAP MANUALS", callback_data="category_CHEAP MANUALS")],
            [InlineKeyboardButton("üõ¢Ô∏è CHEAP MERCHANT", callback_data="category_CHEAP MERCHANT")],
            [InlineKeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ", callback_data="category_–û–±—É—á–µ–Ω–∏–µ")],
            [InlineKeyboardButton("üíé MANUALS", callback_data="category_MANUALS")],
            [InlineKeyboardButton("üòõ MERCHANT", callback_data="category_MERCHANT")],
            [InlineKeyboardButton("üí≥ CC", callback_data="category_CC")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    
    async def showcase_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
        products = db.get_products()
        
        if not products:
            await update.message.reply_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram
        showcase_text = (
            "üì¶ **–ö–∞—Ç–∞–ª–æ–≥**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="buy_product")],
            [InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorite_all")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(showcase_text, reply_markup=reply_markup, parse_mode=None)
    
    async def rules_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞"""
        rules_text = f"""
üìã **–ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {BOT_NAME}**

‚ö†Ô∏è **–ó–∞–ø—É—Å–∫–∞—è –∏ –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ !**
‚ö†Ô∏è **–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ !**

1Ô∏è‚É£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–∫—É–ø–∫–æ–π —Ç–æ–≤–∞—Ä–∞.

2Ô∏è‚É£ –ú—ã –Ω–µ –ø–æ–º–æ–≥–∞–µ–º —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º –∏ –Ω–µ –¥–∞—ë–º –≥–∞—Ä–∞–Ω—Ç–∏–π –≤–±–∏–≤–∞/–ø—Ä–æ—Ñ–∏—Ç–∞. (–≠—Ç–∏ —É—Å–ª–æ–≤–∏—è –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –ø—Ä–æ—à–ª–æ–º —á–∞—Å—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –∏–∑-–∑–∞ —á–µ–≥–æ –º—ã —É–∂–µ—Å—Ç–æ—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞). –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–ª–∞—Ç—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç 700$ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–Ω—è—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–∞.
        """.strip()
        
        await update.message.reply_text(rules_text, parse_mode=None)
    
    async def reviews_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã"""
        reviews_text = (
            "üíé **–û—Ç–∑—ã–≤—ã**\n\n"
            "üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É –æ—Ç–∑—ã–≤–æ–≤:\n"
            "[–ö–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤](https://t.me/+qlf6Er2I23JjZTlh)\n\n"
            "üîó [–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª](https://t.me/luxury_manuals)"
        )
        
        await update.message.reply_text(reviews_text, parse_mode=None)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = f"""
üë∑ **Help**

{OWNER_USERNAME} - –ü–æ –ø–æ–∫—É–ø–∫–µ —Ä–µ–∫–ª–∞–º—ã / –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–î–ª—è –æ–ø–ª–∞—Ç—ã –í–¢–°, ETH, USDT, CRYPTOBOT)

---

Greetings üëã
If you want to buy something in the shop or you want to ask a question email me {OWNER_USERNAME}
        """.strip()
        
        await update.message.reply_text(help_text, parse_mode=None)
    
    async def refresh_bins_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è BIN'–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ ID)
        if user_id == 123456789:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
            await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ BIN'–æ–≤...")
            try:
                db.generate_random_bins_for_all_countries()
                await update.message.reply_text("‚úÖ BIN'—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        
        data = query.data
        
        if data.startswith("category_"):
            await query.answer()
            category = data.replace("category_", "")
            await self.show_category_products(query, category)
        elif data == "top_up_balance":
            await query.answer()
            await self.top_up_balance(query)
        elif data.startswith("topup_"):
            await query.answer("–°–æ–∑–¥–∞—é —Å—á–µ—Ç...")
            amount_str = data.replace("topup_", "")
            try:
                amount = int(amount_str)
            except ValueError:
                await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
                return
            await self.process_balance_topup(query, amount)
        elif data == "favorites":
            await query.answer()
            await self.show_favorites(query)
        elif data == "order_history":
            await query.answer()
            await self.show_order_history(query)
        elif data == "rules":
            await query.answer()
            await self.show_rules_callback(query)
        elif data == "buy_product":
            await query.answer()
            await self.show_product_selection(query)
        elif data == "buy_all_favorites":
            # –ü–æ–∫–∞ –º–∞—Å—Å–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
            await query.answer("–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞")
        elif data == "favorite_all":
            # –û–±—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –≤–∏—Ç—Ä–∏–Ω—ã ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å
            await query.answer("–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ ‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        elif data.startswith("product_"):
            await query.answer()
            product_id = int(data.replace("product_", ""))
            await self.show_product_details(query, product_id)
        elif data.startswith("cc_country_"):
            await query.answer()
            country_code = data.replace("cc_country_", "")
            await self.show_country_bins(query, country_code)
        elif data.startswith("cc_bin_"):
            await query.answer()
            bin_data = data.replace("cc_bin_", "")
            country_code, bin_number = bin_data.split("_", 1)
            await self.show_quantity_selection(query, country_code, bin_number)
        elif data.startswith("cc_quantity_"):
            await query.answer()
            quantity_data = data.replace("cc_quantity_", "")
            country_code, bin_number, quantity_str = quantity_data.split("_", 2)
            try:
                quantity = int(quantity_str)
                await self.show_cc_payment(query, country_code, bin_number, quantity)
            except ValueError:
                await query.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                return
        elif data.startswith("cc_ton_"):
            await query.answer()
            payload = data.replace("cc_ton_", "")
            try:
                country_code, bin_number, quantity_str = payload.split("_", 2)
                quantity = int(quantity_str)
            except ValueError:
                await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            # –î–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–æ–∑–¥–∞–¥–∏–º –∏–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É –∏ –ø–æ–∫–∞–∂–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ TON
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å CC, –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å —ç–∫—Ä–∞–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            cc_products = db.get_products("CC")
            if not cc_products:
                await query.answer("CC –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            cc_product = cc_products[0]
            total_price = cc_product['price'] * quantity
            text = (
                "üí† **–û–ø–ª–∞—Ç–∞ USDT (TON)**\n\n"
                f"**–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:** {total_price} USDT\n"
                f"**–ö–æ—à–µ–ª–µ–∫:** `{TON_USDT_WALLET}`\n\n"
                "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ **'–Ø –æ–ø–ª–∞—Ç–∏–ª'**."
            )
            # –î–ª—è —Å—Å—ã–ª–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π invoice_id –Ω–∞ –æ—Å–Ω–æ–≤–µ BIN
            invoice_id = f"CC-{country_code}-{bin_number}-{quantity}"
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î –¥–ª—è TON-–æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–æ–≥–ª–æ –µ–≥–æ –Ω–∞–π—Ç–∏
            try:
                user_id = query.from_user.id
                db.create_order(user_id, cc_product['id'], total_price, invoice_id)
            except Exception as e:
                logger.error("Failed to create CC TON order: %s", e)
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{invoice_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cc_country_{country_code}")]
            ])
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        elif data.startswith("cc_trx_"):
            await query.answer()
            payload = data.replace("cc_trx_", "")
            try:
                country_code, bin_number, quantity_str = payload.split("_", 2)
                quantity = int(quantity_str)
            except ValueError:
                await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            await self.show_cc_trx_payment(query, country_code, bin_number, quantity)
        elif data.startswith("cc_wallets_"):
            await query.answer()
            payload = data.replace("cc_wallets_", "")
            try:
                country_code, bin_number, quantity_str = payload.split("_", 2)
                quantity = int(quantity_str)
            except ValueError:
                await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            await self.show_cc_wallets(query, country_code, bin_number, quantity)
        elif data.startswith("buy_cc_"):
            await query.answer("–°–æ–∑–¥–∞—é —Å—á–µ—Ç –¥–ª—è CC...")
            cc_data = data.replace("buy_cc_", "")
            country_code, bin_number, quantity_str = cc_data.split("_", 2)
            try:
                quantity = int(quantity_str)
            except ValueError:
                await query.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
                return
            await self.process_cc_purchase(query, country_code, bin_number, quantity)
        elif data.startswith("buy_"):
            await query.answer("–°–æ–∑–¥–∞—é —Å—á–µ—Ç...")
            logger.info("Buy button pressed: %s", data)
            product_id_str = data.replace("buy_", "")
            try:
                product_id = int(product_id_str)
            except ValueError:
                # –ù–µ –Ω–∞—à ID ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                logger.warning("Invalid buy ID: %s", product_id_str)
                return
            await self.process_purchase(query, product_id)
        elif data.startswith("favorite_"):
            product_id = int(data.replace("favorite_", ""))
            await self.add_to_favorites_action(query, product_id)
        elif data.startswith("check_payment_"):
            await query.answer()
            invoice_id = data.replace("check_payment_", "")
            await self.check_payment_status(query, invoice_id)
        elif data.startswith("cancel_payment_"):
            await query.answer()
            invoice_id = data.replace("cancel_payment_", "")
            await self.cancel_payment(query, invoice_id)
        elif data.startswith("pay_ton_"):
            await query.answer()
            invoice_id = data.replace("pay_ton_", "")
            await self.show_ton_wallet_instructions(query, invoice_id)
        elif data.startswith("pay_trx_"):
            await query.answer()
            invoice_id = data.replace("pay_trx_", "")
            await self.show_trx_wallet_instructions(query, invoice_id)
        elif data == "back_to_products":
            await query.answer()
            await self.show_product_selection(query)
        elif data == "back_to_profile":
            await query.answer()
            # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ callback
            user = query.from_user
            user_info = db.get_user(user.id) or {"first_name": user.first_name, "balance": 0.0}
            balance = user_info.get('balance', 0.0)
            keyboard = [
                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/Top up", callback_data="top_up_balance")],
                [
                    InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/Favorite", callback_data="favorites"),
                    InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞/Rules", callback_data="rules")
                ],
                [InlineKeyboardButton("üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤/Order history", callback_data="order_history")],
                [InlineKeyboardButton("üé´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω/Activate coupon", callback_data="activate_coupon")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            profile_text = f"""
üíô **–ò–º—è:** {user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üîë **ID:** {user.id}
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {balance} $
""".strip()
            await query.edit_message_text(profile_text, reply_markup=reply_markup)
        elif data.startswith("manual_paid_"):
            await query.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            order_id_str = data.replace("manual_paid_", "")
            if order_id_str.isdigit():
                db.update_order_status(int(order_id_str), "verifying")
            confirm_text = (
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"ID –∑–∞–∫–∞–∑–∞: `{order_id_str}`"
            )
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]]
            await query.edit_message_text(confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))
        elif data.startswith("manual_cancel_"):
            await query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            order_id_str = data.replace("manual_cancel_", "")
            if order_id_str.isdigit():
                db.update_order_status(int(order_id_str), "canceled")
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        elif data.startswith("topup_paid_"):
            await query.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            amount_str = data.replace("topup_paid_", "")
            try:
                amount = int(amount_str)
            except ValueError:
                await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
                return
            user_id = query.from_user.id
            db.add_balance(user_id, amount)
            confirm_text = (
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USDT.\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {db.get_user(user_id)['balance']} USDT"
            )
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]]
            await query.edit_message_text(confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))
        elif data.startswith("topup_ton_"):
            await query.answer("–ü–æ–∫–∞–∑—ã–≤–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è TON...")
            payload = data.replace("topup_ton_", "")
            parts = payload.split("_", 1)
            if len(parts) >= 2:
                amount = parts[0]
                invoice_id = parts[1]
                await self.show_topup_ton_instructions(query, invoice_id, amount)
            else:
                await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        elif data.startswith("topup_trx_"):
            await query.answer("–ü–æ–∫–∞–∑—ã–≤–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è TRX...")
            payload = data.replace("topup_trx_", "")
            parts = payload.split("_", 1)
            if len(parts) >= 2:
                amount = parts[0]
                invoice_id = parts[1]
                await self.show_topup_trx_instructions(query, invoice_id, amount)
            else:
                await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        elif data.startswith("topup_confirmed_"):
            await query.answer("–°–æ–∑–¥–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            invoice_id = data.replace("topup_confirmed_", "")
            await self.handle_topup_confirmation(query, invoice_id)
        elif data.startswith("admin_confirm_"):
            await self.handle_admin_confirmation(query, data, context)
        elif data.startswith("admin_reject_"):
            await self.handle_admin_rejection(query, data, context)
        elif data.startswith("payment_confirmed_"):
            await query.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            invoice_id = data.replace("payment_confirmed_", "")
            await self.handle_payment_confirmation(query, invoice_id, context)
        elif data == "cc_countries":
            await query.answer()
            await self.show_countries_for_cc(query)

    async def show_product_selection(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        products = db.get_products()
        categories = sorted({p["category"] for p in products}) if products else []

        if not categories:
            await query.edit_message_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        keyboard = [[InlineKeyboardButton(cat, callback_data=f"category_{cat}")] for cat in categories]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

    async def show_country_bins(self, query, country_code: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å BIN'—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
        country = None
        countries = db.get_countries()
        for c in countries:
            if c['code'] == country_code:
                country = c
                break
        
        if not country:
            await query.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º BIN'—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
        bins = db.get_bins_by_country(country_code)
        
        if not bins:
            await query.answer("BIN'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        text = f"üí≥ **BIN'—ã –¥–ª—è {country['flag']} {country['name']}:**\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É BIN'–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(bins), 2):
            row = []
            row.append(InlineKeyboardButton(
                f"{bins[i]['bin_number']}",
                callback_data=f"cc_bin_{country_code}_{bins[i]['bin_number']}"
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π BIN –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if i + 1 < len(bins):
                row.append(InlineKeyboardButton(
                    f"{bins[i+1]['bin_number']}",
                    callback_data=f"cc_bin_{country_code}_{bins[i+1]['bin_number']}"
                ))
            
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cc_countries")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_quantity_selection(self, query, country_code: str, bin_number: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è CC"""
        country = None
        countries = db.get_countries()
        for c in countries:
            if c['code'] == country_code:
                country = c
                break
        
        if not country:
            await query.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ BIN'–µ
        bins = db.get_bins_by_country(country_code)
        selected_bin = None
        for bin_data in bins:
            if bin_data['bin_number'] == bin_number:
                selected_bin = bin_data
                break
        
        if not selected_bin:
            await query.answer("BIN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"""–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CC

–°—Ç—Ä–∞–Ω–∞: {country['flag']} {country['name']}
BIN: {bin_number}
–¢–∏–ø –∫–∞—Ä—Ç—ã: {selected_bin['card_type']}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (1-10)
        keyboard = []
        row = []
        for i in range(1, 11):
            row.append(InlineKeyboardButton(
                f"{i} —à—Ç",
                callback_data=f"cc_quantity_{country_code}_{bin_number}_{i}"
            ))
            if len(row) == 5:  # –ü–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
                keyboard.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cc_country_{country_code}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_cc_payment(self, query, country_code: str, bin_number: str, quantity: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–ª–∞—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ BIN'–∞"""
        country = None
        countries = db.get_countries()
        for c in countries:
            if c['code'] == country_code:
                country = c
                break
        
        if not country:
            await query.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ CC
        cc_products = db.get_products("CC")
        if not cc_products:
            await query.answer("CC –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π CC –ø—Ä–æ–¥—É–∫—Ç (–∏–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä)
        cc_product = cc_products[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ BIN'–µ
        bins = db.get_bins_by_country(country_code)
        selected_bin = None
        for bin_data in bins:
            if bin_data['bin_number'] == bin_number:
                selected_bin = bin_data
                break
        
        if not selected_bin:
            await query.answer("BIN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10
        # quantity = random.randint(1, 10) # This line is now handled in button_callback
        total_price = cc_product['price'] * quantity
        
        text = f"""–û–ø–ª–∞—Ç–∞ CC

–°—Ç—Ä–∞–Ω–∞: {country['flag']} {country['name']}
BIN: {bin_number}
–¢–∏–ø –∫–∞—Ä—Ç—ã: {selected_bin['card_type']}
–¢–æ–≤–∞—Ä: {cc_product['name'].replace('...', '').replace('‚Ä¶', '').strip()}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç
–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {cc_product['price']} $
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} $

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"""
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data=f"buy_cc_{country_code}_{bin_number}_{quantity}")],
        ]
        if TON_USDT_WALLET:
            keyboard.append([InlineKeyboardButton("üí† –ü–µ—Ä–µ–≤–æ–¥ USDT (TON)", callback_data=f"cc_ton_{country_code}_{bin_number}_{quantity}")])
        if TRX_USDT_WALLET:
            keyboard.append([InlineKeyboardButton("‚ö° –ü–µ—Ä–µ–≤–æ–¥ TRX", callback_data=f"cc_trx_{country_code}_{bin_number}_{quantity}")])
        keyboard.append([InlineKeyboardButton("üí≥ –ö–æ—à–µ–ª—å–∫–∏", callback_data=f"cc_wallets_{country_code}_{bin_number}_{quantity}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cc_country_{country_code}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ Markdown, –æ—á–∏—Å—Ç–∏–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            clean_text = text.replace("*", "").replace("_", "").replace("`", "").replace("[", "").replace("]", "").replace("(", "").replace(")", "")
            await query.edit_message_text(clean_text, reply_markup=reply_markup)

    def _escape_markdown(self, text: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        return (
            text
            .replace("\\", "\\\\")
            .replace("_", "\\_")
            .replace("*", "\\*")
            .replace("`", "\\`")
            .replace("[", "\\[")
            .replace("]", "\\]")
            .replace("(", "\\(")
            .replace(")", "\\)")
            .replace("~", "\\~")
            .replace(">", "\\>")
            .replace("#", "\\#")
            .replace("+", "\\+")
            .replace("-", "\\-")
            .replace("=", "\\=")
            .replace("|", "\\|")
            .replace("{", "\\{")
            .replace("}", "\\}")
            .replace(".", "\\.")
            .replace("!", "\\!")
        )

    async def show_cc_wallets(self, query, country_code: str, bin_number: str, quantity: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã CC"""
        country = None
        countries = db.get_countries()
        for c in countries:
            if c['code'] == country_code:
                country = c
                break
        
        if not country:
            await query.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ CC
        cc_products = db.get_products("CC")
        if not cc_products:
            await query.answer("CC –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        cc_product = cc_products[0]
        total_price = cc_product['price'] * quantity
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        safe_country_name = self._escape_markdown(country['name'])
        safe_bin = self._escape_markdown(bin_number)
        safe_product_name = self._escape_markdown(cc_product['name'].replace('...', '').replace('‚Ä¶', '').strip())
        
        text = f"""üí≥ **–ö–æ—à–µ–ª—å–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã CC**

**–°—Ç—Ä–∞–Ω–∞:** {country['flag']} {safe_country_name}
**BIN:** {safe_bin}
**–¢–æ–≤–∞—Ä:** {safe_product_name}
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity} —à—Ç
**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_price} $

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"""
        
        keyboard = [
            [InlineKeyboardButton("üí† USDT (TON)", callback_data=f"cc_ton_{country_code}_{bin_number}_{quantity}")],
            [InlineKeyboardButton("‚ö° TRX", callback_data=f"cc_trx_{country_code}_{bin_number}_{quantity}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cc_country_{country_code}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def show_cc_trx_payment(self, query, country_code: str, bin_number: str, quantity: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–ª–∞—Ç—É TRX –¥–ª—è CC"""
        country = None
        countries = db.get_countries()
        for c in countries:
            if c['code'] == country_code:
                country = c
                break
        
        if not country:
            await query.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ CC
        cc_products = db.get_products("CC")
        if not cc_products:
            await query.answer("CC –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        cc_product = cc_products[0]
        total_price = cc_product['price'] * quantity
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        safe_country_name = self._escape_markdown(country['name'])
        safe_bin = self._escape_markdown(bin_number)
        safe_product_name = self._escape_markdown(cc_product['name'].replace('...', '').replace('‚Ä¶', '').strip())
        
        text = f"""‚ö° **–û–ø–ª–∞—Ç–∞ TRX**

**–°—Ç—Ä–∞–Ω–∞:** {country['flag']} {safe_country_name}
**BIN:** {safe_bin}
**–¢–æ–≤–∞—Ä:** {safe_product_name}
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity} —à—Ç
**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_price} $

–û—Ç–ø—Ä–∞–≤—å—Ç–µ **{total_price} TRX** –Ω–∞ –∫–æ—à–µ–ª–µ–∫:
`{TRX_USDT_WALLET}`

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ **'–Ø –æ–ø–ª–∞—Ç–∏–ª'**."""
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î –¥–ª—è TRX-–æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–æ–≥–ª–æ –µ–≥–æ –Ω–∞–π—Ç–∏
        try:
            user_id = query.from_user.id
            invoice_id = f"CC-TRX-{country_code}-{bin_number}-{quantity}"
            db.create_order(user_id, cc_product['id'], total_price, invoice_id)
        except Exception as e:
            logger.error("Failed to create CC TRX order: %s", e)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cc_country_{country_code}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def add_to_favorites_action(self, query, product_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        ok = db.add_to_favorites(user_id, product_id)
        await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if ok else "–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    
    async def show_category_products(self, query, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category == "CC":
            # –î–ª—è CC –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
            await self.show_countries_for_cc(query)
            return
        
        products = db.get_products(category)
        
        if not products:
            await query.edit_message_text("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Message_too_long
        text = f"üì¶ **{category}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        keyboard = []
        for product in products:
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
            clean_name = product['name'].replace("...", "").replace("‚Ä¶", "").strip()
            display_name = clean_name[:30] if len(clean_name) > 30 else clean_name
            keyboard.append([
                InlineKeyboardButton(
                    f"üõí {display_name} - {product['price']}$",
                    callback_data=f"product_{product['id']}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_countries_for_cc(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã –¥–ª—è CC –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        countries = db.get_countries()
        
        if not countries:
            await query.edit_message_text("–°—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        text = "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:**\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(countries), 2):
            row = []
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BIN'–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
            bins_count = len(db.get_bins_by_country(countries[i]['code']))
            row.append(InlineKeyboardButton(
                f"{countries[i]['flag']} {countries[i]['name']} ({bins_count})", 
                callback_data=f"cc_country_{countries[i]['code']}"
            ))
            if i + 1 < len(countries):
                bins_count_next = len(db.get_bins_by_country(countries[i + 1]['code']))
                row.append(InlineKeyboardButton(
                    f"{countries[i + 1]['flag']} {countries[i + 1]['name']} ({bins_count_next})", 
                    callback_data=f"cc_country_{countries[i + 1]['code']}"
                ))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_product_details(self, query, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
        product = db.get_product(product_id)
        
        if not product:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"""
üì¶ **{product['name'].replace('...', '').replace('‚Ä¶', '').strip()}** {product['emoji']}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {product['description']}
üí∞ **–¶–µ–Ω–∞:** {product['price']} $
üìä **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product['category']}
üì¶ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {'‚àû' if product['quantity'] == -1 else product['quantity']} —à—Ç.
        """.strip()
        
        keyboard = [
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")],
            [InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{product_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def process_purchase(self, query, product_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏"""
        user_id = query.from_user.id
        logger.info("Start purchase. user_id=%s product_id=%s", user_id, product_id)
        product = db.get_product(product_id)
        
        if not product:
            logger.error("Product not found: %s", product_id)
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞
        invoice_data = await crypto_bot.create_invoice(
            amount=product['price'],
            description=f"–ü–æ–∫—É–ø–∫–∞: {product['name'].replace('...', '').replace('‚Ä¶', '').strip()}"
        )
        
        if not invoice_data:
            logger.error("Failed to create invoice for product_id=%s", product_id)
            # –†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞: —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            order_id = db.create_order(user_id, product_id, product['price'], None)
            if order_id == -1:
                await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                return
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∏–∫–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å Markdown
            safe_owner = OWNER_USERNAME.replace("_", "\\_")
            manual_text = (
                "üí≥ –û–ø–ª–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é\n\n"
                f"–¢–æ–≤–∞—Ä: {product['name'].replace('...', '').replace('‚Ä¶', '').strip()}\n"
                f"–°—É–º–º–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: {product['price']} USDT\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {safe_owner} –∏ —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞: {order_id}.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            manual_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"manual_paid_{order_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"manual_cancel_{order_id}")]
            ])
            await query.edit_message_text(manual_text, reply_markup=manual_keyboard)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = db.create_order(user_id, product_id, product['price'], invoice_data.get('invoice_id'))
        
        if order_id == -1:
            logger.error("Failed to create order for user_id=%s product_id=%s", user_id, product_id)
            await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_text = crypto_bot.format_payment_message(invoice_data)
        logger.info("Invoice created: %s", invoice_data.get('invoice_id'))
        invoice_id = invoice_data.get('invoice_id')
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º bot_invoice_url (—Ñ–æ—Ä–º–∞—Ç ?start=invoice-<ID>), –∑–∞—Ç–µ–º pay_url
        invoice_url = (
            invoice_data.get('bot_invoice_url')
            or invoice_data.get('pay_url')
            or f"https://t.me/CryptoBot?start=pay-{invoice_id}"
        )
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É Telegram (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ InlineKeyboardButton)
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã: –ø–µ—Ä–µ–≤–æ–¥ USDT (TON) –∏ TRX –Ω–∞ –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ .env
        alt_buttons = []
        if TON_USDT_WALLET:
            alt_buttons.append([InlineKeyboardButton("üí† –ü–µ—Ä–µ–≤–æ–¥ USDT (TON)", callback_data=f"pay_ton_{invoice_id}")])
        if TRX_USDT_WALLET:
            alt_buttons.append([InlineKeyboardButton("‚ö° –ü–µ—Ä–µ–≤–æ–¥ TRX", callback_data=f"pay_trx_{invoice_id}")])

        payment_reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url)],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{invoice_id}")],
            *alt_buttons,
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{invoice_id}")]
        ])
        
        await query.edit_message_text(
            payment_text,
            reply_markup=payment_reply_markup
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
        await query.answer("üí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    async def process_cc_purchase(self, query, country_code: str, bin_number: str, quantity: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ CC —á–µ—Ä–µ–∑ CryptoBot"""
        user_id = query.from_user.id
        logger.info("Start CC purchase. user_id=%s country_code=%s bin_number=%s quantity=%s", user_id, country_code, bin_number, quantity)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ CC
        cc_products = db.get_products("CC")
        if not cc_products:
            await query.answer("CC –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π CC –ø—Ä–æ–¥—É–∫—Ç (–∏–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä)
        cc_product = cc_products[0]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_price = cc_product['price'] * quantity

        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞
        invoice_data = await crypto_bot.create_invoice(
            amount=total_price,
            description=f"–û–ø–ª–∞—Ç–∞ CC: {cc_product['name'].replace('...', '').replace('‚Ä¶', '').strip()} (BIN: {bin_number}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})"
        )

        if not invoice_data:
            logger.error("Failed to create CC invoice for user_id=%s product_id=%s", user_id, cc_product['id'])
            await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã CC")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = db.create_order(user_id, cc_product['id'], total_price, invoice_data.get('invoice_id'))

        if order_id == -1:
            logger.error("Failed to create CC order for user_id=%s product_id=%s", user_id, cc_product['id'])
            await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã CC")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_text = crypto_bot.format_payment_message(invoice_data)
        logger.info("CC invoice created: %s", invoice_data.get('invoice_id'))
        invoice_id = invoice_data.get('invoice_id')
        invoice_url = (
            invoice_data.get('bot_invoice_url')
            or invoice_data.get('pay_url')
            or f"https://t.me/CryptoBot?start=pay-{invoice_id}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã: –ø–µ—Ä–µ–≤–æ–¥ USDT (TON) –∏ TRX
        alt_buttons = []
        if TON_USDT_WALLET:
            alt_buttons.append([InlineKeyboardButton("üí† –ü–µ—Ä–µ–≤–æ–¥ USDT (TON)", callback_data=f"pay_ton_{invoice_id}")])
        if TRX_USDT_WALLET:
            alt_buttons.append([InlineKeyboardButton("‚ö° –ü–µ—Ä–µ–≤–æ–¥ TRX", callback_data=f"pay_trx_{invoice_id}")])

        payment_reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url)],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{invoice_id}")],
            *alt_buttons,
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cc_country_{country_code}")]
        ])
        
        await query.edit_message_text(
            payment_text,
            reply_markup=payment_reply_markup
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
        await query.answer("üí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    async def top_up_balance(self, query):
        """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        text = """
üí∞ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
        """.strip()
        
        keyboard = [
            [InlineKeyboardButton("üíµ 50 $", callback_data="topup_50")],
            [InlineKeyboardButton("üíµ 100 $", callback_data="topup_100")],
            [InlineKeyboardButton("üíµ 200 $", callback_data="topup_200")],
            [InlineKeyboardButton("üíµ 500 $", callback_data="topup_500")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def process_balance_topup(self, query, amount: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        user_id = query.from_user.id
        logger.info("Balance topup. user_id=%s amount=%s", user_id, amount)
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞
        invoice_data = await crypto_bot.create_invoice(
            amount=amount,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT"
        )
        
        if not invoice_data:
            logger.error("Failed to create topup invoice for amount=%s", amount)
            # –†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            manual_text = (
                "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä—É—á–Ω—É—é\n\n"
                f"–°—É–º–º–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: {amount} USDT\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @luxury_sup –∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            manual_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"topup_paid_{amount}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_profile")]
            ])
            await query.edit_message_text(manual_text, reply_markup=manual_keyboard)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        payment_text = crypto_bot.format_payment_message(invoice_data)
        logger.info("Topup invoice created: %s", invoice_data.get('invoice_id'))
        invoice_id = invoice_data.get('invoice_id')
        invoice_url = (
            invoice_data.get('bot_invoice_url')
            or invoice_data.get('pay_url')
            or f"https://t.me/CryptoBot?start=pay-{invoice_id}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π product_id = 0)
        order_id = db.create_order(user_id, 0, amount, invoice_id)
        if order_id == -1:
            logger.error("Failed to create topup order")
            await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url)],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"topup_confirmed_{invoice_id}")]
        ]
        
        if TON_USDT_WALLET:
            keyboard.append([InlineKeyboardButton("üí† –ü–µ—Ä–µ–≤–æ–¥ USDT (TON)", callback_data=f"topup_ton_{amount}_{invoice_id}")])
        if TRX_USDT_WALLET:
            keyboard.append([InlineKeyboardButton("‚ö° –ü–µ—Ä–µ–≤–æ–¥ TRX", callback_data=f"topup_trx_{amount}_{invoice_id}")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_profile")])
        
        payment_reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            payment_text,
            reply_markup=payment_reply_markup
        )
    
    async def show_favorites(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        user_id = query.from_user.id
        favorites = db.get_favorites(user_id)
        
        if not favorites:
            text = "‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]]
        else:
            text = "‚≠ê **–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n"
            for product in favorites:
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_name = product['name'].replace("...", "").replace("‚Ä¶", "").strip()
                text += f"{product['emoji']} {clean_name} - {product['price']} $\n"
            
            keyboard = [
                [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –≤—Å–µ", callback_data="buy_all_favorites")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_order_history(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤"""
        user_id = query.from_user.id
        orders = db.get_user_orders(user_id)
        
        if not orders:
            text = "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
        else:
            text = "üì¶ **–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:**\n\n"
            for order in orders:
                status_emoji = "‚úÖ" if order['status'] == 'completed' else "‚è≥"
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                order_name = order['name'] or "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
                clean_name = order_name.replace("...", "").replace("‚Ä¶", "").strip()
                emoji = order['emoji'] or "üí∞"
                text += f"{status_emoji} {emoji} {clean_name} - {order['amount']} $ ({order['status']})\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def check_payment_status(self, query, invoice_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ - –û–¢–ö–õ–Æ–ß–ï–ù–û"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É
        await query.answer("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        
        # –°—Ç–∞—Ä—ã–π –∫–æ–¥ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω:
        # status = await crypto_bot.get_invoice_status(invoice_id)
        # 
        # if status == "paid":
        #     await query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        # elif status == "pending":
        #     await query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        # else:
        #     await query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω")
    
    async def cancel_payment(self, query, invoice_id: str):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂"""
        await query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
        await query.edit_message_text("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message:
            return
            
        text = update.message.text
        
        if text == "–ú–µ–Ω—é":
            await self.show_main_menu(update)
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    
    async def show_main_menu(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("–ö–∞–±–∏–Ω–µ—Ç/Profile"), KeyboardButton("–¢–æ–≤–∞—Ä—ã/Products")],
            [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞/Rules"), KeyboardButton("Reviews")],
            [KeyboardButton("Help"), KeyboardButton("Showcase")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

    async def show_ton_wallet_instructions(self, query, invoice_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ USDT (TON)"""
        if not TON_USDT_WALLET:
            await query.answer("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        text = (
            "üí† **–û–ø–ª–∞—Ç–∞ USDT (TON)**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫: `{TON_USDT_WALLET}`\n"
            f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–º–µ–º–æ —É–∫–∞–∂–∏—Ç–µ: `{invoice_id}`\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ **'–Ø –æ–ø–ª–∞—Ç–∏–ª'**."
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cancel_payment_{invoice_id}")]
        ])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    
    async def show_trx_wallet_instructions(self, query, invoice_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ TRX"""
        if not TRX_USDT_WALLET:
            await query.answer("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        text = (
            "‚ö° **–û–ø–ª–∞—Ç–∞ TRX**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫: `{TRX_USDT_WALLET}`\n"
            f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–º–µ–º–æ —É–∫–∞–∂–∏—Ç–µ: `{invoice_id}`\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ **'–Ø –æ–ø–ª–∞—Ç–∏–ª'**."
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cancel_payment_{invoice_id}")]
        ])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    
    async def handle_payment_confirmation(self, query, invoice_id: str, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info("=== handle_payment_confirmation called ===")
        logger.info("query type: %s", type(query))
        logger.info("invoice_id: %s", invoice_id)
        logger.info("context type: %s", type(context))
        logger.info("ADMIN_CHANNEL_ID: %s", ADMIN_CHANNEL_ID)
        
        user_id = query.from_user.id
        logger.info("Payment confirmed by user. user_id=%s invoice_id=%s", user_id, invoice_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = db.get_order_by_payment_id(invoice_id)
        if not order:
            logger.error("Order not found for invoice_id=%s", invoice_id)
            await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        logger.info("Order found: %s", order)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        db.update_order_status(order['id'], "pending_verification")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            logger.info("Preparing admin notification for order_id=%s", order['id'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑–æ–º CC
            is_cc_order = order.get('category') == 'CC' or order.get('name', '').startswith('CC')
            logger.info("Is CC order: %s", is_cc_order)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
            def _esc_md(value: object) -> str:
                text = str(value) if value is not None else ""
                return (
                    text
                    .replace("\\", "\\\\")
                    .replace("_", "\\_")
                    .replace("*", "\\*")
                    .replace("`", "\\`")
                    .replace("[", "\\[")
                    .replace("]", "\\]")
                )

            safe_first_name = _esc_md(query.from_user.first_name)
            safe_username = _esc_md(query.from_user.username or '–±–µ–∑ username')
            safe_product_name = _esc_md(order['name']).replace('...', '').replace('‚Ä¶', '').strip()
            
            admin_message = f"""
üí∞ **–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {safe_first_name} (@{safe_username})
üÜî **ID:** `{user_id}`
üí∞ **–°—É–º–º–∞:** {order['amount']} $
üõçÔ∏è **–¢–æ–≤–∞—Ä:** {safe_product_name} {order['emoji']}
üîó **–°—á–µ—Ç:** `{invoice_id}`
üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–ª—è CC –∑–∞–∫–∞–∑–æ–≤
            if is_cc_order:
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±—â–µ–π —Å—É–º–º—ã
                product_price = order.get('product_price', order['amount'])
                if product_price and product_price > 0:
                    quantity = int(order['amount'] / product_price)
                    admin_message += f"\nüî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity} —à—Ç."
                    logger.info("CC order quantity: %s", quantity)

            admin_message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
            admin_keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{order['id']}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{order['id']}")
                ],
                [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ CryptoBot", url=f"https://t.me/CryptoBot?start=invoice-{invoice_id}")]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª
            admin_chat_id = ADMIN_CHANNEL_ID
            logger.info("Sending admin notification to chat_id=%s", admin_chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ADMIN_CHANNEL_ID –Ω–µ —Ä–∞–≤–µ–Ω –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if admin_chat_id == -1001234567890:
                logger.warning("ADMIN_CHANNEL_ID is still default value! Please set it in .env file")
                await query.answer("‚ö†Ô∏è ADMIN_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return
            
            logger.info("Admin message: %s", admin_message)
            
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=admin_message,
                reply_markup=admin_keyboard,
                parse_mode=ParseMode.MARKDOWN
            )

            logger.info("Admin notification sent successfully")
            await query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success_text = f"""
‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

üí∞ –°—É–º–º–∞: {order['amount']} $
üõçÔ∏è –¢–æ–≤–∞—Ä: {order['name'].replace('...', '').replace('‚Ä¶', '').strip()}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è CC –∑–∞–∫–∞–∑–æ–≤
            if is_cc_order:
                product_price = order.get('product_price', order['amount'])
                if product_price and product_price > 0:
                    quantity = int(order['amount'] / product_price)
                    success_text += f"\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç."

            success_text += """

‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞."""

            await query.edit_message_text(
                success_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")
                ]]),
                parse_mode=ParseMode.MARKDOWN
            )

        except Exception as e:
            logger.error("Failed to send admin notification: %s", e, exc_info=True)
            await query.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    async def handle_topup_confirmation(self, query, invoice_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        logger.info("Topup confirmed by user. user_id=%s invoice_id=%s", user_id, invoice_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        order = db.get_order_by_payment_id(invoice_id)
        if not order:
            await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        db.update_order_status(order['id'], "completed")

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        amount = order['amount']
        db.add_balance(user_id, amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_info = db.get_user(user_id)
        if user_info:
            await query.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success_text = f"""
‚úÖ **–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!**

üí∞ **–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:** {amount} USDT
üí≥ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {db.get_user(user_id)['balance']} USDT
üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!
            """.strip()
            
            await query.edit_message_text(
                success_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")
                ]])
            )
        else:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.edit_message_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")
                ]])
            )

    async def show_topup_ton_instructions(self, query, invoice_id: str, amount: str = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ USDT (TON)"""
        if not TON_USDT_WALLET:
            await query.answer("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        order = db.get_order_by_payment_id(invoice_id)
        if not order:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–ª—è TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            user_id = query.from_user.id
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ invoice_id
            if amount:
                try:
                    amount_float = float(amount)
                except ValueError:
                    amount_float = 0
            else:
                try:
                    amount_str = invoice_id.split('_')[1] if '_' in invoice_id else "0"
                    amount_float = float(amount_str)
                except (ValueError, IndexError):
                    amount_float = 0
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            order_id = db.create_order(user_id, 0, amount_float, f"TON-{invoice_id}")
            if order_id == -1:
                await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                return
            
            order = {
                'amount': amount_float,
                'id': order_id
            }
        
        text = (
            "üí† **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT (TON)**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ **{order['amount']} USDT** –Ω–∞ –∫–æ—à–µ–ª–µ–∫: `{TON_USDT_WALLET}`\n"
            f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–º–µ–º–æ —É–∫–∞–∂–∏—Ç–µ: `{invoice_id}`\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ **'–Ø –æ–ø–ª–∞—Ç–∏–ª'**."
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"topup_confirmed_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    
    async def show_topup_trx_instructions(self, query, invoice_id: str, amount: str = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ TRX"""
        if not TRX_USDT_WALLET:
            await query.answer("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        order = db.get_order_by_payment_id(invoice_id)
        if not order:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–ª—è TRX –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            user_id = query.from_user.id
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ invoice_id
            if amount:
                try:
                    amount_float = float(amount)
                except ValueError:
                    amount_float = 0
            else:
                try:
                    amount_str = invoice_id.split('_')[1] if '_' in invoice_id else "0"
                    amount_float = float(amount_str)
                except (ValueError, IndexError):
                    amount_float = 0
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è TRX –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            order_id = db.create_order(user_id, 0, amount_float, f"TRX-{invoice_id}")
            if order_id == -1:
                await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                return
            
            order = {
                'amount': amount_float,
                'id': order_id
            }
        
        text = (
            "‚ö° **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ TRX**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ **{order['amount']} TRX** –Ω–∞ –∫–æ—à–µ–ª–µ–∫: `{TRX_USDT_WALLET}`\n"
            f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–º–µ–º–æ —É–∫–∞–∂–∏—Ç–µ: `{invoice_id}`\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ **'–Ø –æ–ø–ª–∞—Ç–∏–ª'**."
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"topup_confirmed_{invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

    async def handle_admin_confirmation(self, query, data: str, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
            
        order_id_str = data.replace("admin_confirm_", "")
        if order_id_str.isdigit():
            order_id = int(order_id_str)
            order = db.get_order_by_id(order_id)
            if order:
                db.update_order_status(order_id, "completed")
                await query.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                await query.edit_message_text(
                    f"‚úÖ –ó–∞–∫–∞–∑ {order['emoji']} {order['name'].replace('...', '').replace('‚Ä¶', '').strip()} (ID: {order_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    f"üí∞ –°—É–º–º–∞: {order['amount']} $\n"
                    f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
                    "üõçÔ∏è –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    parse_mode=None
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                user_id = order['user_id']
                user_info = db.get_user(user_id)
                if user_info:
                    user_name = user_info.get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    user_username = user_info.get('username', '–±–µ–∑ username')
                    user_emoji = "üë§" if user_username else "üë§"
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤—ã–¥–∞—á–∏
                    is_cc_order = order.get('category') == 'CC' or (order.get('name') or '').upper().startswith('CC')
                    delivery_contact = "@luxury_sup" if not is_cc_order else "@Bellffortt"

                    await context.bot.send_message(
                        chat_id=user_id,
                        text=(
                            f"{user_emoji} –í–∞—à –∑–∞–∫–∞–∑ {order['emoji']} {order['name'].replace('...', '').replace('‚Ä¶', '').strip()} (ID: {order_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                            f"üí∞ –°—É–º–º–∞: {order['amount']} $\n"
                            f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                            f"üì¶ –ó–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —É {delivery_contact}"
                        ),
                        parse_mode=None
                    )
            else:
                await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")

    async def handle_admin_rejection(self, query, data: str, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
            
        order_id_str = data.replace("admin_reject_", "")
        if order_id_str.isdigit():
            order_id = int(order_id_str)
            order = db.get_order_by_id(order_id)
            if order:
                db.update_order_status(order_id, "canceled")
                await query.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
                await query.edit_message_text(
                    f"‚ùå –ó–∞–∫–∞–∑ {order['emoji']} {order['name'].replace('...', '').replace('‚Ä¶', '').strip()} (ID: {order_id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    f"üí∞ –°—É–º–º–∞: {order['amount']} $\n"
                    f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
                    "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
                    parse_mode=None
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                user_id = order['user_id']
                user_info = db.get_user(user_id)
                if user_info:
                    user_name = user_info.get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    user_username = user_info.get('username', '–±–µ–∑ username')
                    user_emoji = "üë§" if user_username else "üë§"
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"{user_emoji} –í–∞—à –∑–∞–∫–∞–∑ {order['emoji']} {order['name'].replace('...', '').replace('‚Ä¶', '').strip()} (ID: {order_id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                             f"üí∞ –°—É–º–º–∞: {order['amount']} $\n"
                             f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
                             "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
                        parse_mode=None
                    )
            else:
                await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_ids = ADMIN_IDS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ config
        return user_id in admin_ids
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {BOT_NAME} –±–æ—Ç–∞...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = ShopBot()
    bot.run()
