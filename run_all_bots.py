#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –±–æ—Ç–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç—ã –∏–∑ –ø–∞–ø–æ–∫: dost, griffin, team
"""

import asyncio
import sys
import os
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('all_bots.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def run_dost_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ dost"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ DOST...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º dost
        dost_path = Path("dost")
        if dost_path.exists():
            sys.path.insert(0, str(dost_path))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            from bot import main as dost_main
            await dost_main()
        else:
            logger.error("‚ùå –ü–∞–ø–∫–∞ dost –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ DOST: {e}")

async def run_griffin_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ griffin"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ GRIFFIN...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º griffin
        griffin_path = Path("griffin")
        if griffin_path.exists():
            sys.path.insert(0, str(griffin_path))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            from main_bot import main as griffin_main
            await griffin_main()
        else:
            logger.error("‚ùå –ü–∞–ø–∫–∞ griffin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ GRIFFIN: {e}")

async def run_team_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ team"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ TEAM...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º team
        team_path = Path("team")
        if team_path.exists():
            sys.path.insert(0, str(team_path))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            from main_bot import main as team_main
            await team_main()
        else:
            logger.error("‚ùå –ü–∞–ø–∫–∞ team –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ TEAM: {e}")

async def run_all_bots():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    tasks = [
        asyncio.create_task(run_dost_bot(), name="DOST"),
        asyncio.create_task(run_griffin_bot(), name="GRIFFIN"),
        asyncio.create_task(run_team_bot(), name="TEAM")
    ]
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        await asyncio.gather(*tasks, return_exceptions=True)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
    print("üìÅ –ü–∞–ø–∫–∏: dost, griffin, team")
    print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ all_bots.log")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    try:
        asyncio.run(run_all_bots())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
