import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func, text, inspect
from models import Base, User, Payment, UserAction, BotSettings, AdminLevel, PromoCode, Order, OrderStatus, StashType, UserAddress, Product, PaymentMethod
import config
import json
from datetime import datetime, timedelta
import random
import requests
import signal
import sys
import os
import time
from typing import List
from aiogram.exceptions import TelegramBadRequest  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç TelegramBadRequest

# Constants for commissions
CARD_COMMISSION = 0.05  # 5%
CRYPTO_COMMISSION = 0.005  # 0.5%

# --- NEW: TXT FILES READING ---
# –ö—ç—à –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º
products_cache = {}
CACHE_TTL = 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def get_products_for_city(city: str) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 24 —á–∞—Å–∞"""
    now = time.time()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–π –∫—ç—à
    cache_entry = products_cache.get(city)
    if cache_entry:
        products, timestamp = cache_entry
        if now - timestamp < CACHE_TTL:
            return products
    try:
        products = []
        with open('products.txt', 'r', encoding='utf-8') as file:
            for line in file:
                parts = line.strip().split(';')
                if len(parts) >= 3:
                    name, weight, price = parts[:3]
                    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ —Ç–∞–π–Ω–∏–∫–∞
                    stash_emoji = random.choice(['üß≤', 'üíé'])
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–∞–π–Ω–∏–∫–∞ –ø–æ —ç–º–æ–¥–∑–∏
                    stash_type = '–º–∞–≥–Ω–∏—Ç' if stash_emoji == 'üß≤' else '–∫–ª–∞–¥'
                    products.append({
                        'id': len(products),
                        'name': f"{stash_emoji} {name}",
                        'weight': weight,
                        'price': float(price),
                        'stash_type': stash_type,
                        'stash_emoji': stash_emoji
                    })
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ—Ç 3 –¥–æ 7)
        num_products = random.randint(3, 7)
        selected_products = random.sample(products, min(num_products, len(products)))
        logger.info(f"Selected {len(selected_products)} products for {city}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        products_cache[city] = (selected_products, now)
        return selected_products
    except Exception as e:
        logger.error(f"Error in get_products_for_city: {e}")
        return []

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–∞–Ω –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_banned(message: types.Message) -> bool:
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if user and user.is_banned:
            await message.answer("üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return True
    return False

def get_districts_for_city(city: str) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ districts.txt"""
    logger.info(f"Attempting to get districts for city: {city}")
    districts = []
    try:
        with open('districts.txt', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split(';')
                logger.info(f"Processing line: {line.strip()}")
                logger.info(f"Split parts: {parts}")
                if len(parts) > 1:
                    current_city = parts[0].strip()
                    district = parts[1].strip()
                    logger.info(f"Comparing cities: '{current_city}' with '{city}'")
                    if current_city.lower() == city.lower():  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                        logger.info(f"Found matching district: {district}")
                        districts.append(district)
        
        logger.info(f"Found {len(districts)} districts for city {city}: {districts}")
        return districts
    except FileNotFoundError:
        logger.error("districts.txt not found during district retrieval.")
    except Exception as e:
        logger.error(f"Error reading districts.txt for districts for city {city}: {e}")
    return districts

# --- END TXT FILES READING ---

# --- NEW: CITIES AND DISTRICTS READING ---
def get_unique_cities():
    cities = set()
    try:
        with open('districts.txt', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split(';')
                if len(parts) > 0:
                    cities.add(parts[0])
    except Exception as e:
        logging.error(f"Error reading districts.txt for cities: {e}")
    return list(cities)

def get_all_products():
    products = []
    try:
        with open('products.txt', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split(';')
                # Ensure at least 4 parts (name, weight, price, quantity)
                if len(parts) >= 4:
                    product = {
                        'name': parts[0],
                        'weight': parts[1],
                        'price': float(parts[2]),  # Convert price to float
                        'quantity': int(parts[3]), # Read quantity as integer
                        'description': parts[4] if len(parts) > 4 else "", # Get description if available
                        'photo': parts[5] if len(parts) > 5 else None # Get photo if available
                    }
                    products.append(product)
                else:
                    logging.warning(f"Skipping invalid line in products.txt (less than 4 fields): {line.strip()}")
    except FileNotFoundError:
        logging.error("products.txt not found.")
        return []
    except ValueError as e:
        logging.error(f"Error converting values in products.txt: {e}")
        return []
    except Exception as e:
        logging.error(f"Error reading products.txt: {e}")
    return products

# --- END CITIES AND DISTRICTS READING ---

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Database setup
engine = create_engine(config.DATABASE_URL)

# Add migration for created_at column
with Session(engine) as session:
    try:
        # Check if created_at column exists using SQLAlchemy text()
        result = session.execute(text("PRAGMA table_info(users)"))
        columns = [row[1] for row in result]
        
        if 'created_at' not in columns:
            # Add created_at column with default value
            session.execute(text("ALTER TABLE users ADD COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP"))
            session.commit()
            logger.info("Successfully added created_at column to users table")
        
        # Check if is_blocked column exists in users table
        if 'is_blocked' not in columns:
            session.execute(text("ALTER TABLE users ADD COLUMN is_blocked BOOLEAN DEFAULT FALSE"))
            session.commit()
            logger.info("Added is_blocked column to users table")
    except Exception as e:
        logger.error(f"Error during migration: {e}")
        session.rollback()

# Create all tables
Base.metadata.create_all(engine)

# Initialize bots and dispatcher
bot = Bot(token=config.MAIN_BOT_TOKEN)
info_bot = Bot(token=config.INFO_BOT_TOKEN)  # Initialize info_bot
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States
class UserStates(StatesGroup):
    waiting_for_captcha = State()
    waiting_for_city = State()
    waiting_for_payment = State()
    waiting_for_user_id = State()
    waiting_for_setting_value = State()
    waiting_for_topup_amount = State()
    waiting_for_withdraw_amount = State()
    waiting_for_broadcast_message = State()
    waiting_for_promo_code = State()
    waiting_for_promo_amount = State()
    waiting_for_promo_percent = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_promo_limit = State()    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_city_selection = State()
    waiting_for_district_selection = State()
    waiting_for_product_selection = State()
    waiting_for_buy_confirmation = State()
    waiting_for_payment_confirmation = State()
    waiting_for_order_note = State()
    waiting_for_address = State()
    waiting_for_address_description = State()
    waiting_for_order_amount = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    waiting_for_payment_details = State()  # New state for payment details
    in_admin_panel = State()
    in_settings = State()

# –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboardMarkup)
def get_main_keyboard(is_admin=False, is_worker=False, balance=0.0):
    keyboard = [
        [KeyboardButton(text="üèôÔ∏è –ì–æ—Ä–æ–¥–∞")],
        [KeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞")],
        [KeyboardButton(text="üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä")],
        [KeyboardButton(text=f"üí∞ –ë–∞–ª–∞–Ω—Å ({balance} —Ä—É–±.)")],
    ]
    if is_admin:
        keyboard.append([KeyboardButton(text="üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    if is_worker:
        keyboard.append([KeyboardButton(text="üî® –í–æ—Ä–∫–µ—Ä-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message, user=None):
    if user is None:
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    is_admin = user.is_admin if user else False
    is_worker = user.is_worker if user else False
    balance = user.balance if user else 0.0
    reply_markup = get_main_keyboard(is_admin, is_worker, balance)
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=reply_markup)

# –ö–∞–ø—á–∞: –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(UserStates.waiting_for_captcha)
async def check_captcha(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answer = data.get("captcha_answer")
    try:
        if int(message.text) == answer:
            await message.answer("–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            await state.clear()
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            with Session(engine) as session:
                setting = session.query(BotSettings).filter_by(key="welcome_message").first()
                if setting and setting.value:
                    welcome_text = setting.value
                else:
                    welcome_text = "üíé–¢–û–ü–û–í–û–ï –ö–ê–ß–ï–°–¢–í–û, –°–û–ë–°–¢–í–ï–ù–û–ì–û –ü–†–û–ò–ó–í–û–î–°–¢–í–ê üíé\n\nü™ê–ê–¥—Ä–µ—Å–∞ —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥, –Ω–µ –ª–µ—Å! 70% –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –º–∞–≥–Ω–∏—Ç–∞—Ö, \n–Ω–µ –∫–∞–∫–æ–π –≥—Ä—è–∑–∏ , –∏  –±–æ–ª—å—à–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ —Ç–∞–∫—Å–∏ü™ê\n\nüëΩ–ù–∞—à —Ç–æ–≤–∞—Ä –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\nüëΩ–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ \nüëΩ–£–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\nüëΩ–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ\nüëΩ–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–ª–∞–¥—ã"
            await message.answer(welcome_text)
            await show_main_menu(message)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º worker
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext = None):
    user = message.from_user
    args = message.text.split()
    with Session(engine) as session:
        db_user = session.query(User).filter_by(telegram_id=user.id).first()
        if not db_user:
            is_worker = len(args) > 1 and args[1] == "worker"
            db_user = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                is_worker=is_worker,
                balance=0.0,
                is_admin=user.id in config.ADMIN_IDS,
                admin_level=AdminLevel.SUPER_ADMIN if user.id == config.SUPER_ADMIN_ID else AdminLevel.ADMIN if user.id in config.ADMIN_IDS else None
            )
            session.add(db_user)
            session.commit()
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –≤–æ—Ä–∫–µ—Ä–∞, –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            if len(args) > 1 and args[1] == "worker" and not db_user.is_worker:
                db_user.is_worker = True
                session.commit()
    # –ö–∞–ø—á–∞
    a, b = random.randint(1, 9), random.randint(1, 9)
    await message.answer(f"–ö–∞–ø—á–∞: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {a} + {b}?")
    await state.update_data(captcha_answer=a + b)
    await state.set_state(UserStates.waiting_for_captcha)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üèôÔ∏è –ì–æ—Ä–æ–¥–∞")
async def menu_cities(message: types.Message, state: FSMContext):
    if await check_user_banned(message):
        return
    await log_user_action(message.from_user.id, "button_click", {"button": "–ì–æ—Ä–æ–¥–∞"})
    cities = get_unique_cities()
    if not cities:
        await message.answer("–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = []
    cities_list = sorted(cities)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    for i in range(0, len(cities_list), 2):
        row = []
        row.append(InlineKeyboardButton(text=cities_list[i], callback_data=f"city_{cities_list[i]}"))
        if i + 1 < len(cities_list):
            row.append(InlineKeyboardButton(text=cities_list[i+1], callback_data=f"city_{cities_list[i+1]}"))
        keyboard.append(row)
        
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
    await state.set_state(UserStates.waiting_for_city_selection)

@dp.callback_query(F.data.startswith("city_"))
async def select_city(callback: types.CallbackQuery, state: FSMContext):
    try:
        city = callback.data.split('_')[1]
        await state.update_data(selected_city=city)
        await show_districts(callback.message, city)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in select_city: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞")

@dp.callback_query(F.data == "back_to_cities")
async def back_to_cities(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
        await log_user_action(
            info_bot,
            callback.from_user.id,
            "back_to_cities",
            {
                "button": callback.data
            }
        )
        
        await state.set_state(UserStates.waiting_for_city_selection)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=get_cities_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in back_to_cities: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞")
        await state.clear()
        await show_main_menu(callback.message)

@dp.callback_query(F.data.startswith("dist_"))
async def select_district(callback: types.CallbackQuery, state: FSMContext):
    try:
        district = callback.data.split('_')[1]
        data = await state.get_data()
        city = data.get("selected_city")
        
        if not city:
            await callback.answer("–û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
            
        await state.update_data(selected_district=district)
        await state.set_state(UserStates.waiting_for_product_selection)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
        await log_user_action(
            info_bot,
            callback.from_user.id,
            "district_selected",
            {
                "city": city,
                "district": district,
                "button": callback.data
            }
        )
        
        products = get_products_for_city(city)
        if not products:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = []
        for i, product in enumerate(products):
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{product['name']} ({product['weight']}) - {product['price']} —Ä—É–±.",
                    callback_data=f"prod_{i}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cities")])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(products=products)
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ä–∞–π–æ–Ω–µ {district}:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"Error in select_district: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–π–æ–Ω–∞")
        await state.clear()
        await show_main_menu(callback.message)

@dp.callback_query(F.data.startswith("prod_"))
async def select_product(callback: types.CallbackQuery, state: FSMContext):
    try:
        product_index = int(callback.data.split('_')[1])
        data = await state.get_data()
        products = data.get("products")
        city = data.get("selected_city")
        district = data.get("selected_district")
        
        if not all([products, city, district]):
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        if product_index >= len(products):
            await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        product = products[product_index]
        await state.update_data(selected_product=product)
        await state.set_state(UserStates.waiting_for_buy_confirmation)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
        await log_user_action(
            info_bot,
            callback.from_user.id,
            "product_selected",
            {
                "city": city,
                "district": district,
                "product": product,
                "button": callback.data
            }
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"buy_product_{product_index}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ])
        
        await callback.message.edit_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:\n\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"–†–∞–π–æ–Ω: {district}\n"
            f"–¢–æ–≤–∞—Ä: {product['name']} ({product['weight']})\n"
            f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in select_product: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞")
        await state.clear()
        await show_main_menu(callback.message)

@dp.callback_query(F.data.startswith("buy_product_"))
async def confirm_buy(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        product = data.get('selected_product')
        selected_district = data.get('selected_district')
        if not all([product, selected_district]):
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ —Ä–∞–π–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        stash_type = product.get('stash_type', '–∫–ª–∞–¥')
        order_number = random.randint(100000, 999999)
        CARD_COMMISSION = 0.05
        CRYPTO_COMMISSION = 0.005
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
        base_price = product['price']
        promo_percent = data.get('promo_percent')
        promo_code = data.get('active_promo_code')
        discount_text = ""
        
        logger.info(f"[confirm_buy] Initial base_price: {base_price}, promo_percent: {promo_percent}")

        if promo_percent:
            try:
                promo_percent_float = float(promo_percent)
                discount = base_price * promo_percent_float / 100
                base_price = max(0, base_price - discount)
                discount_text = f"\nüéüÔ∏è –ü—Ä–∏–º–µ–Ω—ë–Ω –ø—Ä–æ–º–æ–∫–æ–¥: -{promo_percent}%"
                logger.info(f"[confirm_buy] Discount applied. New base_price: {base_price}")
            except ValueError:
                logger.warning(f"[confirm_buy] Invalid promo_percent value: {promo_percent}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –∫ —Ü–µ–Ω–µ —Å–æ —Å–∫–∏–¥–∫–æ–π
        card_price = base_price * (1 + CARD_COMMISSION)
        crypto_price = base_price * (1 + CRYPTO_COMMISSION)
        logger.info(f"[confirm_buy] Final card_price: {card_price}, crypto_price: {crypto_price}")
        
        with Session(engine) as session:
            order = Order(
                order_number=str(order_number),
                user_id=callback.from_user.id,
                product_name=product['name'],
                product_weight=product['weight'],
                price=base_price,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
                commission=CARD_COMMISSION,
                total_price=card_price,
                district=selected_district,
                stash_type=StashType.MAGNET if stash_type == '–º–∞–≥–Ω–∏—Ç' else StashType.STASH,
                status=OrderStatus.PENDING,
                payment_method=None
            )
            session.add(order)
            # –ï—Å–ª–∏ –±—ã–ª –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî —É–≤–µ–ª–∏—á–∏—Ç—å activations –∏, –µ—Å–ª–∏ –ª–∏–º–∏—Ç, –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            if promo_code:
                promo = session.query(PromoCode).filter_by(code=promo_code).first()
                if promo:
                    promo.activations += 1
                    if promo.activations >= promo.max_activations:
                        promo.is_used = True
                    promo.used_at = datetime.now()
            session.commit()
        await state.update_data(
            order_number=order_number,
            product=product,
            district=selected_district,
            card_price=card_price,
            crypto_price=crypto_price,
            stash_type=stash_type
        )
        order_details = (
            f"üõç <b>–í–∞—à –∑–∞–∫–∞–∑ #{order_number}</b>\n\n"
            f"üìç –†–∞–π–æ–Ω: {selected_district}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product['name'].split(' ', 1)[-1]} ({product['weight']})\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {base_price:.1f} —Ä—É–±.\n"
            f"üó∫ –¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç üß≤' if stash_type == '–º–∞–≥–Ω–∏—Ç' else '–¢–∞–π–Ω–∏–∫ üó∫'}\n\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π: {card_price:.2f} —Ä—É–±. (–∫–æ–º–∏—Å—Å–∏—è {int(CARD_COMMISSION * 100)}%)\n"
            f"‚Çø BTC: {crypto_price:.2f} —Ä—É–±. (–∫–æ–º–∏—Å—Å–∏—è {CRYPTO_COMMISSION * 100}%)\n"
            f"üíµ USDT: {crypto_price:.2f} —Ä—É–±. (–∫–æ–º–∏—Å—Å–∏—è {CRYPTO_COMMISSION * 100}%)\n"
            f"{discount_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )
        payment_methods_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data=f"pay_method_card_{order_number}")],
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å USDT", callback_data=f"pay_method_usdt_{order_number}")],
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å BTC", callback_data=f"pay_method_btc_{order_number}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
        ])
        await callback.message.edit_text(
            order_details,
            reply_markup=payment_methods_keyboard,
            parse_mode="HTML"
        )
        await state.update_data(active_promo_code=None, promo_percent=None)
    except Exception as e:
        logger.error(f"Error in confirm_buy: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

@dp.callback_query(F.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞
        await log_user_action(
            info_bot,
            callback.from_user.id,
            "order_cancelled",
            {
                "button": callback.data
            }
        )
        
        await state.clear()
        await callback.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        await show_main_menu(callback.message)
    except Exception as e:
        logger.error(f"Error in cancel_order: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")
        await state.clear()
        await show_main_menu(callback.message)

@dp.message(F.text == "üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä")
async def menu_operator(message: types.Message):
    if await check_user_banned(message):
        return
    await log_user_action(info_bot, message.from_user.id, "button_click", {"button": "–û–ø–µ—Ä–∞—Ç–æ—Ä"})
    with Session(engine) as session:
        settings = session.query(BotSettings).first()
        operator = settings.operator if settings and settings.operator else "@matras_operator"
    await message.answer(f"–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {operator}")

@dp.message(F.text.startswith("üí∞ –ë–∞–ª–∞–Ω—Å"))
async def menu_balance(message: types.Message):
    try:
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if user:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
                    [InlineKeyboardButton(text="üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="withdraw_balance")]
                ]
                markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
                await message.answer(
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=markup
                )
    except Exception as e:
        logger.error(f"Error in menu_balance: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

@dp.callback_query(F.data == "topup_balance")
async def topup_balance(callback: types.CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="topup_method_card")],
            [InlineKeyboardButton(text="‚Çø BTC", callback_data="topup_method_btc")],
            [InlineKeyboardButton(text="üíµ USDT", callback_data="topup_method_usdt")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_balance")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in topup_balance: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("topup_method_"))
async def topup_method(callback: types.CallbackQuery, state: FSMContext):
    try:
        payment_type = callback.data.split('_')[2]  # card, btc –∏–ª–∏ usdt
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        with Session(engine) as session:
            payment_method = session.query(PaymentMethod).filter_by(
                type=payment_type,
                is_active=True
            ).first()
            if not payment_method:
                await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)
                return
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_topup_{payment_type}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="topup_balance")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
            await callback.message.edit_text(
                f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
                f"{payment_method.details}\n\n"
                f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in topup_method: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("confirm_topup_"))
async def confirm_topup(callback: types.CallbackQuery, state: FSMContext):
    try:
        payment_type = callback.data.split('_')[2]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞
        await callback.message.edit_text(
            "üîç –ò—â–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="topup_balance")]]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in confirm_topup: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == "back_to_balance")
async def back_to_balance(callback: types.CallbackQuery):
    try:
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
            if user:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
                    [InlineKeyboardButton(text="üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="withdraw_balance")]
                ]
                markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
                
                await callback.message.edit_text(
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=markup
                )
    except Exception as e:
        logger.error(f"Error in back_to_balance: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(F.text == "üî® –í–æ—Ä–∫–µ—Ä-–ø–∞–Ω–µ–ª—å")
async def menu_worker_panel(message: types.Message):
    await log_user_action(info_bot, message.from_user.id, "button_click", {"button": "–í–æ—Ä–∫–µ—Ä-–ø–∞–Ω–µ–ª—å"})
    await show_worker_panel(message)

@dp.message(F.text == "üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def menu_admin_panel(message: types.Message, state: FSMContext):
    await log_user_action(info_bot, message.from_user.id, "button_click", {"button": "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"})
    
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return
            
        # Debug logging
        logger.info(f"User admin level: {user.admin_level}")
        
        if user.admin_level not in [AdminLevel.ADMIN, AdminLevel.SUPER_ADMIN]:
            await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user.admin_level}")
            return
            
    await state.set_state(UserStates.in_admin_panel)  # Set state when entering admin panel
    await show_admin_panel(message)

@dp.message(UserStates.in_admin_panel)
async def handle_admin_panel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"handle_admin_panel: {message.text}, state={current_state}")
    if message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        await admin_users(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await admin_stats(message)
    elif message.text == "üìù –õ–æ–≥–∏":
        await admin_logs(message)
    elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await admin_settings(message, state)
    elif message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
        await state.set_state(UserStates.waiting_for_user_id)
        await state.update_data(action="topup")
        return
    elif message.text == "üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤":
        await admin_withdraw(message, state)
    elif message.text == "üö´ –ë–∞–Ω":
        await admin_ban(message, state)
    elif message.text == "‚úÖ –†–∞–∑–±–∞–Ω":
        await admin_unban(message, state)
    elif message.text == "üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
        await admin_orders(message)
    elif message.text == "üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏":
        await admin_address_management(message)
    elif message.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏":
        await admin_order_management(message)
    elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):")
        await state.set_state(UserStates.waiting_for_broadcast_message)
        return
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await show_main_menu(message)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_admin_keyboard())

@dp.message(UserStates.waiting_for_topup_amount)
async def process_topup_amount(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get('target_user_id')
        amount = float(message.text)
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                await show_admin_panel(message)
                return
            user.balance += amount
            session.commit()
            await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.")
        await state.clear()
        await show_admin_panel(message)
    except Exception as e:
        logger.error(f"Error in process_topup_amount: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        await state.clear()
        await show_admin_panel(message)

# --- LOG TO INFO BOT ---
def send_log_to_info_bot(text):
    info_bot_token = config.INFO_BOT_TOKEN
    info_bot_id = config.INFO_BOT_CHAT_ID
    url = f"https://api.telegram.org/bot{info_bot_token}/sendMessage"
    data = {
        "chat_id": info_bot_id,
        "text": text
    }
    try:
        resp = requests.post(url, data=data, timeout=5)
        if resp.status_code != 200:
            logger.error(f"Failed to send log to info bot: {resp.status_code} {resp.text}")
    except Exception as e:
        logger.error(f"Failed to send log to info bot: {e}")

async def log_user_action(info_bot: Bot, user_id: int, action_type: str, details: dict = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                return
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            log = UserAction(
                user_id=user_id,
                action_type=action_type,
                action_data=json.dumps(details) if details else None
            )
            session.add(log)
            session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞ —Å –º–µ—Ç–∫–æ–π –±–æ—Ç–∞
            log_message = f"ü¶Ö <b>–ë–û–¢: –ì–†–ò–§–§–ò–ù</b>\nüìù User Action Log:\nUser: {user.username or user.first_name} (ID: {user_id})\nAction: {action_type}"
            if details:
                log_message += f"\nDetails: {json.dumps(details, ensure_ascii=False, indent=2)}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ–±–æ—Ç–∞
            try:
                await info_bot.send_message(
                    chat_id=config.INFO_BOT_CHAT_ID,
                    text=log_message,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Error sending log to info bot: {e}")
                
    except Exception as e:
        logger.error(f"Error in log_user_action: {e}")

async def get_user_balance(user_id):
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        return user.balance if user else 0.0

async def change_user_balance(user_id, amount):
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if user:
            user.balance += amount
            session.commit()
            return user.balance
        return None

def get_admin_keyboard():
    keyboard = [
        [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üìù –õ–æ–≥–∏"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton(text="üè¶ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")],
        [KeyboardButton(text="üö´ –ë–∞–Ω"), KeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω")],
        [KeyboardButton(text="üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"), KeyboardButton(text="üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏")],
        [KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")],
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def show_admin_panel(message):
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.is_admin:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
            
        text = "üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        reply_markup = get_admin_keyboard()
        await message.answer(text, reply_markup=reply_markup)

# --- Admin Panel Handlers ---
@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users(message: types.Message, state: FSMContext = None):
    page = 0
    await show_users_page(message, page)

@dp.callback_query(F.data.startswith("users_page_"))
async def users_page_callback(callback: types.CallbackQuery):
    page = int(callback.data.split('_')[2])
    await show_users_page(callback.message, page, edit=True)
    await callback.answer()

async def show_users_page(message, page, edit=False):
    with Session(engine) as session:
        users = session.query(User).order_by(User.id).all()
        total_users = len(users)
        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ")
            return
        start = page * USERS_PER_PAGE
        end = start + USERS_PER_PAGE
        users_page = users[start:end]
        text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä. {page+1}):\n\n"
        for user in users_page:
            text += f"ID: {user.telegram_id}\n"
            text += f"Username: @{user.username}\n"
            text += f"–ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
            text += f"–°—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–∞–Ω–µ–Ω' if user.is_banned else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n"
            text += f"–ê–¥–º–∏–Ω: {'‚úÖ' if user.is_admin else '‚ùå'}\n"
            text += f"–í–æ—Ä–∫–µ—Ä: {'‚úÖ' if user.is_worker else '‚ùå'}\n"
            text += "-------------------\n"
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = []
        if start > 0:
            keyboard.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_page_{page-1}"))
        if end < total_users:
            keyboard.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"users_page_{page+1}"))
        markup = InlineKeyboardMarkup(inline_keyboard=[keyboard] if keyboard else [])
        if edit:
            await message.edit_text(text, reply_markup=markup)
        else:
            await message.answer(text, reply_markup=markup)

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: types.Message):
    with Session(engine) as session:
        total_users = session.query(User).count()
        active_users = session.query(User).filter_by(is_banned=False).count()
        banned_users = session.query(User).filter_by(is_banned=True).count()
        blocked_users = session.query(User).filter_by(is_blocked=True).count() # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        total_orders = session.query(Order).count()
        completed_orders = session.query(Order).filter_by(status=OrderStatus.COMPLETED).count()
        total_balance = session.query(func.sum(User.balance)).scalar() or 0
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        text += f"üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {banned_users}\n"
        text += f"‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_users}\n" # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        text += f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
        text += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} —Ä—É–±."
        
        await message.answer(text)

@dp.message(F.text == "üìù –õ–æ–≥–∏")
async def admin_logs(message: types.Message):
    with Session(engine) as session:
        logs = session.query(UserAction).order_by(UserAction.timestamp.desc()).limit(50).all()
        if not logs:
            await message.answer("–ù–µ—Ç –ª–æ–≥–æ–≤")
            return
            
        text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        for log in logs:
            user = session.query(User).filter_by(telegram_id=log.user_id).first()
            username = user.username if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            text += f"üë§ @{username} (ID: {log.user_id})\n"
            text += f"üìù –î–µ–π—Å—Ç–≤–∏–µ: {log.action_type}\n"
            text += f"üìÖ –í—Ä–µ–º—è: {log.timestamp}\n"
            text += "-------------------\n"
            
        await message.answer(text)

def get_settings_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data="change_operator")],
        [InlineKeyboardButton(text="üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏", callback_data="manage_cards")],
        [InlineKeyboardButton(text="‚Çø –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ BTC", callback_data="manage_btc")],
        [InlineKeyboardButton(text="üíµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ USDT", callback_data="manage_usdt")],
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç", callback_data="change_chat")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])
    return keyboard

async def is_admin(user_id: int) -> bool:
    try:
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            return user and user.admin_level in [AdminLevel.ADMIN, AdminLevel.SUPER_ADMIN]
    except Exception as e:
        logger.error(f"Error in is_admin check: {e}")
        return False

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings(message: types.Message, state: FSMContext):
    try:
        if not await is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
            
        await state.set_state(UserStates.in_settings)
        keyboard = get_settings_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in admin_settings: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await state.clear()
        await show_main_menu(message)

@dp.callback_query(F.data.startswith("change_"))
async def handle_setting_change(callback: types.CallbackQuery, state: FSMContext):
    try:
        setting_type = callback.data.split('_')[1]
        setting_key = {
            'operator': 'operator',
            'card': 'card',
            'chat': 'chat',
            'btc': 'crypto_btc',
            'usdt': 'crypto_usdt'
        }.get(setting_type)
        
        if not setting_key:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return
        
        await state.set_state(UserStates.waiting_for_setting_value)
        await state.update_data(setting_key=setting_key)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã
        with Session(engine) as session:
            settings = session.query(BotSettings).first()
            current_value = getattr(settings, setting_key, None) if settings else None
        await callback.message.answer(
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in handle_setting_change: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await state.clear()
        await show_admin_panel(callback.message)

async def show_settings_panel(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        with Session(engine) as session:
            settings = session.query(BotSettings).first()
            if not settings:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            settings_text = (
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>\n\n"
                f"üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {settings.support}\n"
                f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: {settings.operator}\n"
                f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã: {settings.card_details}\n"
                f"‚Çø –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫—Ä–∏–ø—Ç—ã: {settings.crypto_details}\n"
                f"üí¨ –ß–∞—Ç: {settings.chat}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            )
            
            keyboard = get_settings_keyboard()
            await message.answer(settings_text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"Error in show_settings_panel: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@dp.message(UserStates.waiting_for_setting_value)
async def process_setting_value(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        setting_key = data.get("setting_key")
        
        with Session(engine) as session:
            settings = session.query(BotSettings).first()
            if not settings:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await state.clear()
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if setting_key == 'operator':
                settings.operator = message.text
            elif setting_key == 'card':
                settings.card_details = message.text
            elif setting_key == 'crypto_btc':
                settings.crypto_details = message.text
            elif setting_key == 'crypto_usdt':
                settings.crypto_details = message.text
            elif setting_key == 'chat':
                settings.chat = message.text
                
            settings.updated_by = message.from_user.id
            session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await log_user_action(
                message.from_user.id,
                "admin_setting_updated",
                {
                    "setting_key": setting_key,
                    "new_value": message.text
                }
            )
            
            await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        await state.clear()
        await show_settings_panel(message)
        
    except Exception as e:
        logger.error(f"Error in process_setting_value: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await state.clear()
        await show_admin_panel(message)

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        await log_user_action(
            info_bot,
            callback.from_user.id,
            "admin_settings_button_click",
            {
                "button": "back_to_admin",
                "action": "return_to_admin_panel"
            }
        )
        
        await state.clear()
        await show_admin_panel(callback.message)
    except Exception as e:
        logger.error(f"Error in back_to_admin_panel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        await state.clear()
        await show_main_menu(callback.message)

@dp.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def admin_topup(message: types.Message, state: FSMContext):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="topup_method_card")],
            [InlineKeyboardButton(text="‚Çø BTC", callback_data="topup_method_btc")],
            [InlineKeyboardButton(text="üíµ USDT", callback_data="topup_method_usdt")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in admin_topup: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("topup_method_"))
async def topup_method(callback: types.CallbackQuery, state: FSMContext):
    try:
        payment_type = callback.data.split('_')[2]  # card, btc –∏–ª–∏ usdt
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        with Session(engine) as session:
            payment_method = session.query(PaymentMethod).filter_by(
                type=payment_type,
                is_active=True
            ).first()
            if not payment_method:
                await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)
                return
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_topup_{payment_type}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="topup_balance")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
            await callback.message.edit_text(
                f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
                f"{payment_method.details}\n\n"
                f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in topup_method: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("confirm_topup_"))
async def confirm_topup(callback: types.CallbackQuery, state: FSMContext):
    try:
        payment_type = callback.data.split('_')[2]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞
        await callback.message.edit_text(
            "üîç –ò—â–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="topup_balance")]]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in confirm_topup: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(F.text == "üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
async def admin_withdraw(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(UserStates.waiting_for_user_id)
    await state.update_data(action="withdraw")

@dp.message(F.text == "üö´ –ë–∞–Ω")
async def admin_ban(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
    await state.set_state(UserStates.waiting_for_user_id)
    await state.update_data(action="ban")

@dp.message(F.text == "‚úÖ –†–∞–∑–±–∞–Ω")
async def admin_unban(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
    await state.set_state(UserStates.waiting_for_user_id)
    await state.update_data(action="unban")

@dp.message(UserStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    action = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π action
    try:
        user_id = int(message.text)
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                await show_admin_panel(message)
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            action = data.get('action')
            
            if action == 'ban':
                user.is_banned = True
                session.commit()
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await send_message_and_handle_block(
                    user_id,
                    "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            elif action == 'unban':
                user.is_banned = False
                session.commit()
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await send_message_and_handle_block(
                    user_id,
                    "‚úÖ –í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            elif action == 'topup':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                await state.update_data(target_user_id=user_id)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
                await state.set_state(UserStates.waiting_for_topup_amount)
                return
            elif action == 'withdraw':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                await state.update_data(target_user_id=user_id)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:")
                await state.set_state(UserStates.waiting_for_withdraw_amount)
                return
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await log_user_action(
                info_bot,
                message.from_user.id,
                action,
                {"target_user_id": user_id}
            )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in process_user_id: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        if action and action not in ['topup', 'withdraw']:
            await state.clear()
            await show_admin_panel(message)

@dp.message(F.text == "üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
async def admin_orders(message: types.Message):
    try:
        with Session(engine) as session:
            orders = session.query(Order).order_by(Order.created_at.desc()).all()
            if not orders:
                await message.answer("üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞")
                return
            text = "üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n"
            for order in orders:
                status_emoji = {
                    OrderStatus.PENDING: "‚è≥",
                    OrderStatus.PAID: "‚úÖ",
                    OrderStatus.CANCELLED: "‚ùå",
                    OrderStatus.COMPLETED: "üéâ"
                }.get(order.status, "‚ùì")
                text += f"{status_emoji} ID: {order.id}\n"
                text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user_id}\n"
                text += f"üìç –†–∞–π–æ–Ω: {order.district}\n"
                text += f"üì¶ –¢–æ–≤–∞—Ä: {order.product_name}\n"
                text += f"üí∞ –°—É–º–º–∞: {order.total_price} —Ä—É–±.\n"
                text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.payment_method.upper() if order.payment_method else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {order.notes if order.notes else '–ù–µ—Ç'}\n"
                text += f"‚è∞ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            keyboard = [
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_orders")],
                [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await message.answer(text, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in admin_orders: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤")

@dp.callback_query(F.data == "refresh_orders")
async def refresh_orders(callback: types.CallbackQuery):
    await admin_orders(callback.message)
    await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")

@dp.callback_query(F.data == "all_orders")
async def show_all_orders(callback: types.CallbackQuery):
    with Session(engine) as session:
        orders = session.query(Order).order_by(Order.created_at.desc()).all()
        text = "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            user = session.query(User).filter_by(telegram_id=order.user_id).first()
            username = user.username if user else "Unknown"
            status_emoji = {
                OrderStatus.PENDING: "‚è≥",
                OrderStatus.PAID: "‚úÖ",
                OrderStatus.CANCELLED: "‚ùå",
                OrderStatus.COMPLETED: "üéâ"
            }.get(order.status, "‚ùì")
            
            text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.order_number}\n"
            text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            text += f"üì¶ –¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
            text += f"üèô –†–∞–π–æ–Ω: {order.district}\n"
            text += f"üó∫ –¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–ö–ª–∞–¥'}\n"
            text += f"üí∞ –°—É–º–º–∞: {order.total_price} —Ä—É–±.\n"
            text += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.payment_method.upper()}\n"
            text += f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            if order.notes:
                text += f"üìù –ó–∞–º–µ—Ç–∫–∏: {order.notes}\n"
            text += "\n"
            
            # Split message if it's too long
            if len(text) > 3000:
                await callback.message.answer(text)
                text = ""
        
        if text:
            await callback.message.answer(text)
        
        # Log admin action
        await log_user_action(
            callback.from_user.id,
            "admin_view_all_orders",
            {"total_orders": len(orders)}
        )

@dp.callback_query(F.data.startswith("order_"))
async def manage_order(callback: types.CallbackQuery, state: FSMContext):
    action, order_number = callback.data.split('_')[1:]
    
    with Session(engine) as session:
        order = session.query(Order).filter_by(order_number=order_number).first()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if action == "complete":
            order.status = OrderStatus.COMPLETED
            session.commit()
            await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
        elif action == "cancel":
            order.status = OrderStatus.CANCELLED
            session.commit()
            await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        elif action == "note":
            await state.set_state(UserStates.waiting_for_order_note)
            await state.update_data(order_number=order_number)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞:")
            return
        
        # Log admin action
        await log_user_action(
            info_bot,
            callback.from_user.id,
            f"admin_{action}_order",
            {"order_number": order_number}
        )
        
        # Refresh orders list
        await admin_orders(callback.message)

@dp.message(UserStates.waiting_for_order_note)
async def save_order_note(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_number = data.get("order_number")
    
    with Session(engine) as session:
        order = session.query(Order).filter_by(order_number=order_number).first()
        if order:
            order.notes = message.text
            session.commit()
            await message.answer("–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–∫–∞–∑—É")
            
            # Log admin action
            await log_user_action(
                info_bot,
                message.from_user.id,
                "admin_add_order_note",
                {
                    "order_number": order_number,
                    "note_length": len(message.text)
                }
            )
    
    await state.clear()
    await admin_orders(message)

# --- Address Management ---
@dp.message(F.text == "üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏")
async def admin_address_management(message: types.Message):
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = session.query(User).all()
        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ")
            return
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –¥–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å
        keyboard = [
            [InlineKeyboardButton(text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å @{u.username}", callback_data=f"admin_add_address_{u.telegram_id}")]
            for u in users
        ]
        keyboard += [
            [InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å @{u.username}", callback_data=f"admin_delete_address_user_{u.telegram_id}")]
            for u in users
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        await log_user_action(
            info_bot,
            message.from_user.id,
            "admin_address_management",
            {"users_count": len(users)}
        )

@dp.callback_query(F.data.startswith("admin_add_address_"))
async def admin_add_address_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split('_')[3])
        with Session(engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            await state.update_data(target_user_id=user_id)
            await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: {user.telegram_id}):")
            await state.set_state(UserStates.waiting_for_address)
    except Exception as e:
        logger.error(f"Error in admin_add_address_start: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()

@dp.message(UserStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    try:
        with Session(engine) as session:
            admin = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not admin or not admin.is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
                await state.clear()
                return
            data = await state.get_data()
            target_user_id = data.get("target_user_id")
            if not target_user_id:
                await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
                await state.clear()
                return
            url = message.text.strip()
            if not url:
                await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
                return
            if not (url.startswith('http://') or url.startswith('https://')):
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ")
                return
            await state.update_data(address_url=url)
            await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞:")
            await state.set_state(UserStates.waiting_for_address_description)
    except Exception as e:
        logger.error(f"Error in process_address: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")
        await state.clear()

@dp.message(UserStates.waiting_for_address_description)
async def process_address_description(message: types.Message, state: FSMContext):
    try:
        with Session(engine) as session:
            admin = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not admin or not admin.is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
                await state.clear()
                return
            data = await state.get_data()
            target_user_id = data.get("target_user_id")
            address_url = data.get("address_url")
            if not target_user_id or not address_url:
                await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await state.clear()
                return
            description = message.text.strip()
            if not description:
                await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            new_address = UserAddress(
                user_id=target_user_id,
                address=address_url,
                description=description,
                is_active=True
            )
            session.add(new_address)
            session.commit()
            target_user = session.query(User).filter_by(telegram_id=target_user_id).first()
            await message.answer(f"‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_user.username}!")
            await log_user_action(
                info_bot,
                message.from_user.id,
                "admin_add_address",
                {
                    "target_user_id": target_user_id,
                    "target_username": target_user.username,
                    "url": address_url,
                    "description": description
                }
            )
    except Exception as e:
        logger.error(f"Error in process_address_description: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")
        await state.clear()

@dp.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
async def admin_order_management(message: types.Message):
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = session.query(User).all()
        if not users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="admin_add_order")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="admin_delete_order")]
        ]
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@dp.callback_query(F.data == "admin_delete_order")
async def admin_delete_order_start(callback: types.CallbackQuery):
    with Session(engine) as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
        orders = session.query(Order).order_by(Order.created_at.desc()).limit(10).all()
        if not orders:
            await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
            
        keyboard = []
        for order in orders:
            user = session.query(User).filter_by(telegram_id=order.user_id).first()
            username = user.username if user else "Unknown"
            btn_text = f"‚ùå #{order.order_number} - @{username} - {order.product_name}"
            keyboard.append([
                InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"admin_delete_order_{order.order_number}"
                )
            ])
            
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )

@dp.callback_query(F.data.startswith("admin_delete_order_"))
async def admin_delete_order_confirm(callback: types.CallbackQuery):
    try:
        order_number = callback.data.split('_')[3]
        with Session(engine) as session:
            order = session.query(Order).filter_by(order_number=order_number).first()
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
            session.delete(order)
            session.commit()
            
            await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
            
            # Log action
            await log_user_action(
                callback.from_user.id,
                "admin_delete_order",
                {"order_number": order_number}
            )
            
    except Exception as e:
        logger.error(f"Error in admin_delete_order_confirm: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@dp.callback_query(F.data == "admin_add_order")
async def admin_add_order_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        with Session(engine) as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = session.query(User).all()
            if not users:
                await callback.message.edit_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            keyboard = []
            for user in users:
                button_text = f"@{user.username} (ID: {user.telegram_id})"
                callback_data = f"admin_add_order_{user.telegram_id}"
                keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
                reply_markup=markup
            )
            
    except Exception as e:
        logger.error(f"Error in admin_add_order_start: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()
        await show_admin_panel(callback.message)

@dp.callback_query(F.data.startswith("admin_add_order_"))
async def admin_add_order_user(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split('_')[3])
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π user_id
        await state.clear()
        await state.update_data(target_user_id=user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
        keyboard = []
        for i, city in enumerate(config.CITIES):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≥–æ—Ä–æ–¥–∞ –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            keyboard.append([InlineKeyboardButton(text=city, callback_data=f"admin_city_{i}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in admin_add_order_user: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()
        await show_admin_panel(callback.message)

@dp.callback_query(F.data.startswith("admin_district_"))
async def admin_add_order_district(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –∏ —Ä–∞–π–æ–Ω–∞—Ö
        data = await state.get_data()
        city = data.get('selected_city')
        target_user_id = data.get('target_user_id')
        districts = get_districts_for_city(city)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞–π–æ–Ω–∞ –∏–∑ callback_data
        district_index = int(callback.data.split('_')[2])
        district = districts[district_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        products = get_products_for_city(city)
        
        if not products:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.", show_alert=True)
            await state.clear()
            await show_admin_panel(callback.message)
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä
        product = random.choice(products)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –±–µ–∑ –ø—Ä–∏–ø–∏—Å–∫–∏ ADM-
        order_number = str(int(time.time()))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
        CARD_COMMISSION = 0.05  # 5%
        CRYPTO_COMMISSION = 0.005  # 0.5%
        
        card_price = product['price'] * (1 + CARD_COMMISSION)
        crypto_price = product['price'] * (1 + CRYPTO_COMMISSION)
        
        # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–∞–π–Ω–∏–∫–∞
        stash_type = random.choice(['magnet', 'stash'])
        
        # Generate random date between 1-5 days ago
        days_ago = random.randint(1, 5)
        random_date = datetime.now() - timedelta(days=days_ago)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        with Session(engine) as session:
            order = Order(
                order_number=order_number,
                user_id=target_user_id,
                product_name=product['name'],
                product_weight=product['weight'],
                district=district,
                total_price=card_price,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π –∫–∞—Ä—Ç—ã
                payment_method='card',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ä—Ç–∞
                stash_type=StashType.MAGNET if stash_type == 'magnet' else StashType.STASH,
                status=OrderStatus.PAID,  # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
                created_at=random_date,
                updated_at=random_date
            )
            
            session.add(order)
            session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter_by(telegram_id=target_user_id).first()
            username = user.username if user else "Unknown"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"–¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
                f"–†–∞–π–æ–Ω: {order.district}\n"
                f"–¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–ö–ª–∞–¥'}\n"
                f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {order.total_price:.2f} —Ä—É–±.\n"
                f"–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await send_message_and_handle_block(
                    target_user_id,
                    f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}\n"
                    f"–¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
                    f"–†–∞–π–æ–Ω: {order.district}\n"
                    f"–¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–ö–ª–∞–¥'}\n"
                    f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                    f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {order.total_price:.2f} —Ä—É–±.\n"
                    f"–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω"
                )
            except Exception as e:
                logger.error(f"Error sending order notification to user: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            await log_user_action(
                info_bot,
                callback.from_user.id,
                "admin_create_order",
                {
                    "order_number": order.order_number,
                    "user_id": target_user_id,
                    "product": product,
                    "district": district,
                    "stash_type": stash_type,
                    "base_price": product['price'],
                    "final_price": order.total_price
                }
            )
            
    except Exception as e:
        logger.error(f"Error in admin_add_order_district: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        await state.clear()
        await show_admin_panel(callback.message)

@dp.callback_query(F.data.startswith("admin_stash_"))
async def admin_select_stash(callback: types.CallbackQuery, state: FSMContext):
    try:
        stash_type = callback.data.split('_')[2]
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all(key in data for key in ['target_user_id', 'product', 'selected_district', 'order_number', 'card_price']):
            logger.error(f"Missing required data in state: {data}")
            await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            await state.clear()
            await show_admin_panel(callback.message)
            return
        
        # Generate random date between 1-5 days ago
        days_ago = random.randint(1, 5)
        random_date = datetime.now() - timedelta(days=days_ago)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        with Session(engine) as session:
            order = Order(
                order_number=data['order_number'],
                user_id=data['target_user_id'],
                product_name=data['product']['name'],
                product_weight=data['product']['weight'],
                district=data['selected_district'],
                total_price=data['card_price'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π –∫–∞—Ä—Ç—ã
                payment_method='card',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ä—Ç–∞
                stash_type=StashType.MAGNET if stash_type == 'magnet' else StashType.STASH,
                status=OrderStatus.PAID,  # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
                created_at=random_date,
                updated_at=random_date
            )
            
            session.add(order)
            session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter_by(telegram_id=data['target_user_id']).first()
            username = user.username if user else "Unknown"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"–¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
                f"–†–∞–π–æ–Ω: {order.district}\n"
                f"–¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–ö–ª–∞–¥'}\n"
                f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {data['product']['price']} —Ä—É–±.\n"
                f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {order.total_price:.2f} —Ä—É–±.\n"
                f"–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await send_message_and_handle_block(
                    data['target_user_id'],
                    f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}\n"
                    f"–¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
                    f"–†–∞–π–æ–Ω: {order.district}\n"
                    f"–¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–ö–ª–∞–¥'}\n"
                    f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {data['product']['price']} —Ä—É–±.\n"
                    f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {order.total_price:.2f} —Ä—É–±.\n"
                    f"–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω"
                )
            except Exception as e:
                logger.error(f"Error sending order notification to user: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            await log_user_action(
                info_bot,
                callback.from_user.id,
                "admin_create_order",
                {
                    "order_number": order.order_number,
                    "user_id": data['target_user_id'],
                    "product": data['product'],
                    "district": data['selected_district'],
                    "stash_type": stash_type,
                    "base_price": data['product']['price'],
                    "final_price": order.total_price
                }
            )
            
    except Exception as e:
        logger.error(f"Error in admin_select_stash: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        await state.clear()
        await show_admin_panel(callback.message)

@dp.callback_query(F.data.startswith("pay_method_card_"))
async def pay_method_card(callback: types.CallbackQuery, state: FSMContext):
    try:
        await log_user_action(info_bot, callback.from_user.id, "pay_method", {"method": "card", "order": callback.data})
        order_number = callback.data.split('_')[3]
        
        with Session(engine) as session:
            order = session.query(Order).filter_by(order_number=order_number).first()
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            active_cards = session.query(PaymentMethod).filter(
                PaymentMethod.type == "card",
                PaymentMethod.is_active == True
            ).all()
            
            if not active_cards:
                await callback.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
                return

            selected_card = random.choice(active_cards)
            order.selected_payment_details = selected_card.details
            session.commit()
            
            await state.update_data(current_order_number=order_number)

            # Send payment details to user
            payment_message = (
                f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                f"{selected_card.details}\n\n"
                f"#Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.order_number}\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order.total_price:.2f} —Ä—É–±.\n"
                f"üíØ –¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
                f"üèô –†–∞–π–æ–Ω: {order.district}\n"
                f"üó∫ –¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–¢–∞–π–Ω–∏–∫'}\n\n"
                f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'"
            )
            
            confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{order.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
            ])
            
            await callback.message.edit_text(payment_message, reply_markup=confirm_keyboard)

    except Exception as e:
        logger.error(f"Error in pay_method_card: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)

@dp.callback_query(F.data.startswith("pay_method_usdt_"))
async def pay_method_usdt(callback: types.CallbackQuery, state: FSMContext):
    try:
        await log_user_action(info_bot, callback.from_user.id, "pay_method", {"method": "usdt", "order": callback.data})
        order_number = callback.data.split('_')[3]
        with Session(engine) as session:
            order = session.query(Order).filter_by(order_number=order_number).first()
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            active_wallets = session.query(PaymentMethod).filter(
                PaymentMethod.type == "usdt",
                PaymentMethod.is_active == True
            ).all()
            
            if not active_wallets:
                await callback.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
                return

            selected_wallet = random.choice(active_wallets)
            order.selected_payment_details = selected_wallet.details
            session.commit()
            
            await state.update_data(current_order_number=order_number)

            payment_message = (
                f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                f"{selected_wallet.details}\n\n"
                f"#Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.order_number}\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order.total_price:.2f} —Ä—É–±.\n"
                f"üíØ –¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
                f"üèô –†–∞–π–æ–Ω: {order.district}\n"
                f"üó∫ –¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–¢–∞–π–Ω–∏–∫'}\n\n"
                f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'"
            )

            confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{order.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
            ])

            await callback.message.edit_text(payment_message, reply_markup=confirm_keyboard)

    except Exception as e:
        logger.error(f"Error in pay_method_usdt: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)

@dp.callback_query(F.data.startswith("pay_method_btc_"))
async def pay_method_btc(callback: types.CallbackQuery, state: FSMContext):
    try:
        await log_user_action(info_bot, callback.from_user.id, "pay_method", {"method": "btc", "order": callback.data})
        order_number = callback.data.split('_')[3]
        with Session(engine) as session:
            order = session.query(Order).filter_by(order_number=order_number).first()
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            active_wallets = session.query(PaymentMethod).filter(
                PaymentMethod.type == "btc",
                PaymentMethod.is_active == True
            ).all()
            
            if not active_wallets:
                await callback.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö BTC –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
                return

            selected_wallet = random.choice(active_wallets)
            order.selected_payment_details = selected_wallet.details
            session.commit()
            
            await state.update_data(current_order_number=order_number)

            payment_message = (
                f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                f"{selected_wallet.details}\n\n"
                f"#Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.order_number}\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order.total_price:.2f} —Ä—É–±.\n"
                f"üíØ –¢–æ–≤–∞—Ä: {order.product_name} ({order.product_weight})\n"
                f"üèô –†–∞–π–æ–Ω: {order.district}\n"
                f"üó∫ –¢–∏–ø —Ç–∞–π–Ω–∏–∫–∞: {'–ú–∞–≥–Ω–∏—Ç' if order.stash_type == StashType.MAGNET else '–¢–∞–π–Ω–∏–∫'}\n\n"
                f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'"
            )

            confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{order.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
            ])

            await callback.message.edit_text(payment_message, reply_markup=confirm_keyboard)

    except Exception as e:
        logger.error(f"Error in pay_method_btc: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)

def get_order_by_id(order_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ –µ–≥–æ ID"""
    with Session(engine) as session:
        return session.query(Order).filter_by(id=order_id).first()

def migrate_database():
    """Perform database migrations if needed"""
    with Session(engine) as session:
        try:
            # Check if created_at column exists in users table
            result = session.execute(text("PRAGMA table_info(users)"))
            columns = [row[1] for row in result]
            
            if 'created_at' not in columns:
                session.execute(text("ALTER TABLE users ADD COLUMN created_at DATETIME DEFAULT CURRENT_TIMESTAMP"))
                session.commit()
                logger.info("Added created_at column to users table")
            
            # Check if is_blocked column exists in users table
            if 'is_blocked' not in columns:
                session.execute(text("ALTER TABLE users ADD COLUMN is_blocked BOOLEAN DEFAULT FALSE"))
                session.commit()
                logger.info("Added is_blocked column to users table")
            
            # Create promo_codes table if it doesn't exist
            try:
                session.execute(text("""
                    CREATE TABLE IF NOT EXISTS promo_codes (
                        id INTEGER PRIMARY KEY,
                        code VARCHAR UNIQUE,
                        percent FLOAT,
                        max_activations INTEGER,
                        activations INTEGER DEFAULT 0,
                        is_used BOOLEAN DEFAULT FALSE,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        used_at DATETIME
                    )
                """))
                session.commit()
                logger.info("Created promo_codes table")
                
                # Check and add missing columns
                result = session.execute(text("PRAGMA table_info(promo_codes)"))
                existing_columns = [row[1] for row in result]
                
                # List of required columns and their types
                required_columns = {
                    'percent': 'FLOAT',
                    'max_activations': 'INTEGER',
                    'activations': 'INTEGER DEFAULT 0',
                    'is_used': 'BOOLEAN DEFAULT FALSE',
                    'created_at': 'DATETIME DEFAULT CURRENT_TIMESTAMP',
                    'used_at': 'DATETIME'
                }
                
                # Add missing columns
                for column, column_type in required_columns.items():
                    if column not in existing_columns:
                        session.execute(text(f"ALTER TABLE promo_codes ADD COLUMN {column} {column_type}"))
                        logger.info(f"Added {column} column to promo_codes table")
                
                session.commit()
                
            except Exception as e:
                logger.error(f"Error creating/updating promo_codes table: {e}")
                session.rollback()
            
        except Exception as e:
            logger.error(f"Error during database migration: {e}")
            session.rollback()

def init_bot_settings():
    """Initialize default bot settings if they don't exist"""
    with Session(engine) as session:
        settings = session.query(BotSettings).first()
        if not settings:
            settings = BotSettings(
                support="–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                operator="–û–ø–µ—Ä–∞—Ç–æ—Ä",
                card_details="–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã",
                crypto_details="–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫—Ä–∏–ø—Ç—ã",
                chat="–ß–∞—Ç"
            )
            session.add(settings)
            session.commit()
            logger.info("Initialized default bot settings")

async def main():
    logger.info("Starting bot...")
    # Initialize default settings
    init_bot_settings()
    logger.info("Settings initialized")
    
    # Migrate database if needed
    migrate_database()
    logger.info("Database migration completed")
    
    # Start polling
    try:
        logger.info("Starting polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error running bot: {e}")
    finally:
        logger.info("Bot stopped")

@dp.message(F.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞")
async def menu_delivery(message: types.Message):
    if await check_user_banned(message):
        return
    await log_user_action(info_bot, message.from_user.id, "button_click", {"button": "–î–æ—Å—Ç–∞–≤–∫–∞"})
    with Session(engine) as session:
        settings = session.query(BotSettings).first()
        operator = settings.operator if settings and settings.operator else "@matras_operator"
    delivery_text = (
        "~ –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç—É –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ , –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–ª–∞—Ç–æ–π ! "
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–∫–æ–π , –ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∏–∂–µ üëá ( –§–æ—Ä–º–∞ –Ω–∞ –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ ) - –ü—Ä–∏–º–µ—Ä { –ú–µ—Ñ 1–≥ , –≤–∞—à –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ }"
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operator_link = operator if operator.startswith("https://") or operator.startswith("tg://") else f"https://t.me/{operator.lstrip('@')}"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–µ—Ä–∞—Ç–æ—Ä", url=operator_link)]
        ]
    )
    await message.answer(delivery_text, reply_markup=keyboard)

async def show_districts(message: types.Message, city: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–π–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        districts = get_districts_for_city(city)
        if not districts:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
            return
        
        keyboard = []
        for district in districts:
            keyboard.append([InlineKeyboardButton(text=district, callback_data=f"dist_{district}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –≤ –≥–æ—Ä–æ–¥–µ {city}:", reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in show_districts: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤")

def get_cities_keyboard():
    cities = get_unique_cities()
    keyboard = []
    cities_list = sorted(cities)
    for i in range(0, len(cities_list), 2):
        row = []
        row.append(InlineKeyboardButton(text=cities_list[i], callback_data=f"city_{cities_list[i]}"))
        if i + 1 < len(cities_list):
            row.append(InlineKeyboardButton(text=cities_list[i+1], callback_data=f"city_{cities_list[i+1]}"))
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    try:
        await log_user_action(info_bot, callback.from_user.id, "confirm_payment", {"order": callback.data})
        await callback.message.edit_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏—â–µ–º –≤–∞—à –ø–ª–∞—Ç—ë–∂...")
        await callback.answer()
        await asyncio.sleep(10)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await callback.message.edit_text(
            "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
        )
    except Exception as e:
        logger.error(f"Error in confirm_payment: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã", show_alert=True)

# --- –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞' ---
@dp.message(UserStates.waiting_for_broadcast_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    print("–í—ã–∑–≤–∞–Ω process_broadcast_message")  # <--- print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    text = message.text
    sent = 0
    failed = 0
    failed_details = []
    with Session(engine) as session:
        users = session.query(User).filter_by(is_banned=False).all()
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users)}")
        for user in users:
            try:
                await bot.send_message(user.telegram_id, text)
                sent += 1
            except Exception as e:
                failed += 1
                failed_details.append(f"ID: {user.telegram_id}, error: {e}")
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}")
    print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}, details: {failed_details}")
    if failed_details:
        await message.answer("–û—à–∏–±–∫–∏:\n" + "\n".join(failed_details[:10]))
    logger.info(f"Broadcast finished: sent={sent}, failed={failed}, details={failed_details}")
    await state.clear()
    await show_admin_panel(message)

# --- –î–û–ë–ê–í–õ–ï–ù–û: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@dp.message()
async def universal_admin_panel_handler(message: types.Message, state: FSMContext):
    print(f"universal_admin_panel_handler: {message.text}")  # <--- print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    with Session(engine) as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or not user.is_admin:
            return  # –ù–µ –∞–¥–º–∏–Ω ‚Äî –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
    admin_buttons = [
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìù –õ–æ–≥–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üè¶ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", "üö´ –ë–∞–Ω", "‚úÖ –†–∞–∑–±–∞–Ω",
        "üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", "üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏",
        "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    ]
    if message.text in admin_buttons:
        logger.info(f"universal_admin_panel_handler: {message.text}")
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ
        current_state = await state.get_state()
        if current_state != UserStates.in_admin_panel.state:
            await state.set_state(UserStates.in_admin_panel)
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_admin_panel(message, state)

if __name__ == '__main__':
    asyncio.run(main())
